// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /login)
	GetLogin(ctx echo.Context) error

	// (POST /login/callback)
	PostLoginCallback(ctx echo.Context) error

	// (GET /signup)
	GetSignup(ctx echo.Context) error

	// (POST /signup/callback)
	PostSignupCallback(ctx echo.Context) error

	// (GET /status)
	GetStatus(ctx echo.Context) error

	// (GET /user/me)
	GetUserMe(ctx echo.Context) error

	// (PUT /user/me)
	PutUserMe(ctx echo.Context) error

	// (GET /user/me/private)
	GetUserMePrivate(ctx echo.Context) error

	// (PUT /user/me/private)
	PutUserMePrivate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogin(ctx)
	return err
}

// PostLoginCallback converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLoginCallback(ctx)
	return err
}

// GetSignup converts echo context to params.
func (w *ServerInterfaceWrapper) GetSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSignup(ctx)
	return err
}

// PostSignupCallback converts echo context to params.
func (w *ServerInterfaceWrapper) PostSignupCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSignupCallback(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// GetUserMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserMe(ctx)
	return err
}

// PutUserMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUserMe(ctx)
	return err
}

// GetUserMePrivate converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserMePrivate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserMePrivate(ctx)
	return err
}

// PutUserMePrivate converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserMePrivate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUserMePrivate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/login", wrapper.GetLogin)
	router.POST(baseURL+"/login/callback", wrapper.PostLoginCallback)
	router.GET(baseURL+"/signup", wrapper.GetSignup)
	router.POST(baseURL+"/signup/callback", wrapper.PostSignupCallback)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.GET(baseURL+"/user/me", wrapper.GetUserMe)
	router.PUT(baseURL+"/user/me", wrapper.PutUserMe)
	router.GET(baseURL+"/user/me/private", wrapper.GetUserMePrivate)
	router.PUT(baseURL+"/user/me/private", wrapper.PutUserMePrivate)

}
