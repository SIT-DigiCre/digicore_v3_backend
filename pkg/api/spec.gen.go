// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
