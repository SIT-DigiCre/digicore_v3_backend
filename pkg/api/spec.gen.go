// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"x9awygAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
