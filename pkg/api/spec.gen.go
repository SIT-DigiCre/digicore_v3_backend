// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY32/bNhD+VwRuj0zk/gI2A31Yt7XokG5DsnQPQWAw1FlmR5EKefTiGfrfB5KyZeuH",
	"nbZWtjdJJI/f3ffx7qg14bootQKFlkzXxIAttbIQXt6w7BLuHVj0b1wrBBUeWVlKwRkKrdJPViv/zfIF",
	"FMw/fWtgTqbkm7QxncZRm/5sjDakqipKMrDciNIbIVPykUmRBYsJ+Dk0AeTnpKLkvUIwiskrMEsw4yO5",
	"WlmEoo3iV41vtVPZ+PtfgtXOcEgyDTZRGhN4EBYbKNeKOVxoI/6BJ4Dzg8MFKKyt7oelorX1IJdoYrom",
	"pdElGBRRRRKWIP0DrkogU2LRCJV7RwqwluXQM1ZRYuDeCeM9vKlNNAtuK0ou4f53bfFC50L9yKS8Y/yv",
	"7uZcZz32KXk406wUZ344B3UGD2jYGbI8LFpGLfoFWxRVG1OwvAPkSuTKlf85EofXFswH6AIQXKuZM/IU",
	"IGgh1OtntGAPr5+/erURgtZylhu256dQCDmYr9vj+7jDQhucWZDzmVBodOZ41Ogo/jjrs04Bo5hvMbjd",
	"izYstSI67H5k3r6DeBa6xPdy3oFg5I6lKObTmEKGznZN2e332tqd1hKY6pirJzYWhwTOOIolzKQoBPbm",
	"m0xYrk028+EWWe+U4UNyXOKfI1E/F10GCmfKFXexrnWmeKCzAaTD+uxTl7dCd3XW2v2Q8FphG/aS7lNQ",
	"M/aILP3pbzzuhp+0Y/JYvv0Mm54M4M4IXF35clZ3P8AMGF/+/NtdeHurTcGQTMkvf/5B6uIXtBtGCd1s",
	"t0As4zEXaq4DDoHSj/wkcsG18XFdgrGxxr44f3Y+8aTqEhQrRfg0OZ8QSkqGiwAnlZvTnUPwbL9MvwNM",
	"wozk+vKCBEsmVOz3WRyNyYHud3jPJ5OTdRC7Oainj7jYgvNjMVneEN/JRAaifynfJVTbHk8/ghHzVRJW",
	"tv3sai3yDRbf6Gx1Ql97mo+B5inxEvCyiUekkR8aB9W4hDwK5JXjHKxNbEz6FSWvIoo+41u0aasvH2DV",
	"bivJoGzjlCHd1qVodOHW+/TFp8F30MkTaLeV1EYVb2uv/6l6j6McV77bLqVXvnFxEmclfAGBtK6Go5Xx",
	"NRz36aNSyiRebG3y2wYek18erRAd3xGksQUZPN3FKimNngsJfZGpe7nRI1Pvc0A++T7WipKXkxfHA7N3",
	"GQ+LXh5ftP2Z8BVi3XQsZHqz36vc3Fa3jZY9RaFtKl0PQdelv6kc4qi5UI6XjNwBej7sQnvS7PMo1bhO",
	"AIMGHkHpzs+1L9Xa00gnrvCLbViwH4gMliC1r8/h1hQ632marhfaYjVdl9pglfpmlxnB7mRkarEtjnPm",
	"pO+npeZMhs9eqtq0hr+bTCaehgbd+vBvKhtyHaEkXpFiSq9oR//WZ+/W3OB3dVv9GwAA//8YNLlAHBUA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
