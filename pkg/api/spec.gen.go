// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DIcqjwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
