// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY34/jNBD+VyLDY7Qp3CGhvnHAnQ7tAdqyx8Oqqlxnmvhw7ezMpFCq/O/IdrY/0vSH",
	"dtsVb008/vzNzOeZSVdCuXnlLFgmMVwJBKqcJQgP72R+B481EPsn5SyDDT9lVRmtJGtnsy/krH9HqoS5",
	"9L++RpiJofgq20BncZWynxEdiqZpUpEDKdSVBxFD8VkanQfEBLxNmgCrG9Gk4qNlQCvNCHABeH0moyUx",
	"zLssfnX83tU2v/75d0CuRgVJ7oAS6ziBfzTxhsq9lTWXDvW/8Ap0fqi5BMst6m5YmrRFD3KJEMOVqNBV",
	"gKyjigwswPgfvKxADAUxalt4R+ZAJAvoWWtSgfBYa/QePrQQmw3jJhV38Pi7I751hbY/SmOmUv21f7hy",
	"+Rn4wWoLdKQLW1eXRr0nwE+wj6aVs5Ma+2NEqnTOTAqUO0dqy1AABovSIU8IzGyiLaPLaxVT14NWk79K",
	"8zPIry3TDb8Om8NHR6fpA8T07Lvc722XApotpJiTy0Cx5Jr2oWj9vkWbOmdA2j241nCDeCi1UrFewMTo",
	"uebehBzNvc5fQRLEdQ6WJ7aeT2N5fYFqdC7Sbel0wJ+jpXQ3iG3Mz7j6X/7m04S90RbkqYv/HMxD2qBa",
	"KaCz5NZajkPBBVWj5uXIF962T4NEQF+o/dM0PL13OJcshuKXP/8QbZkOZ4RVkT6dWTJXsexrO3OBjGbj",
	"V37ShVYOfW4WgBS7wZubb24GXhOuAisrHV4NbgYiFZXkMtDJzNOlLyCEa7ehfABOgkVyf3crAhKG3vIx",
	"j6uxZqS7s8i3g8HFet12aerpeLdrcn6NZUE+Cb7nxgxE/zK1rRJHPZ5+BtSzZRJ2dv3cF3DMORC/c/ny",
	"gr72tMkDbT7xEvCyifduI0HGGprrJuQskqN4ERKKvaBJxXeRRR/4mm3WmSAPZJXWDeagbKPJId22Herq",
	"wm3P6YvPht9RJy+g3U6lvKp4O2f9T9V7muV15bseXnrlGzcn0SpRJYSk7Ws4olxfw/GcvlQak8RPMEp+",
	"e6InzfOjFaLjZ5IsTjAHb/d8mVToZtpAX2TaNn71yLTnHJFPscu1ScXbwZvTgdn5bAyb3p7etP7sfYFY",
	"nyYWMXzYnVUexs14o2WfojA39Rek+yqXDMeStDVsXbUcHc7Qp21yr16ATiun3oth0MEZad36K+i5ensd",
	"+cQdfjOFDbuByGEBxvkeHb65wvQ7zLJV6Yib4apyyE3mB16JWk5NTFW51uNM1sbP1MYpacLrIFfsLH8/",
	"GAx8GjbsVsf/VKFQ70Qq4ldWLOtNuncFyFfwjm3wuxk3/wUAAP//7WUGoMoTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
