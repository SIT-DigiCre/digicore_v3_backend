// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//zcw9MoVpQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
