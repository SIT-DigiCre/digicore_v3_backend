// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
