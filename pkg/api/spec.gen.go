// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
