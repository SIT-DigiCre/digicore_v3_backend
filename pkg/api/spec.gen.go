// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfW8cxRn/KqdtpbbSJueQhFJL/JFXSBtDFMfwB4qq8e74vPHezmV21s5hnRTsIgI0",
	"haoCqoLU0hZaXtKAoKW89sMcdsK3qHZm32Z3ZnZu73bvfPYfjmLf7Dxvv+fZZ555Zm7bsFC3hzzoEd9Y",
	"3DYw9HvI8yH95Sywr8KbAfRJ+JuFPAI9+l/Q67mOBYiDvPYNH3nh33xrHXZB+L8fY7hmLBo/aqdTt9mn",
	"fvsCxggbg8HANGzoW9jphZMYi8YzwHVsOmMLhmPMFiTWcWNgGmdd4G0sB5YFfX9ifMTzCTiJPmrFqgh5",
	"uOQRiD3gLkO8CXH92lju+wR285p4CpGLKPDs+ulfhT4KsAVbNoJ+y0OkBW85PklZWfFAQNYRdp6HDbBz",
	"JiDr0CPRrLxaBmY0OwUHm2Jx2+hh1IOYOAzJLtyEbvgf0u9BY9HwCXa8TihIF/o+6EDBZwPTwPBm4OBQ",
	"wueiKdIHrg9M4yq8eQX55KyLOuFPkW5GLfzspnHrGAI955iFbNiB3jF4i2BwjIAOfe4GMBaN/Xc+3n/z",
	"JcM0NplvhI8nHIXsOf6VYNV1rMz0qwi5EHha8++9+PEPb77Kze8FrhvOHI9zCOz6Qr1FfwAYg74WteHO",
	"/4Y7n/DS2M4mNIPAYeIQh7iwmqro5H8f7t4Z7n4kVVjOoIycmdgokjqj1pyJrwGBhTmgVmH94Ycf7//x",
	"dwore6A7jlY+2Xv9rq5KKCne+TI6uIw6jncOuO4qsDZEWLdhVRXcffjPb4Y7nw13vxnuvqzLLSWY4W8J",
	"EAJxF/nkHIaAwMCHglDgOdbGGCrdfXW4uzvcuT/cvUu5/YuYW7PreI+fNLvg1uOPPELN2AO+v4WwXZXu",
	"74c7Xw5376tURIk+Rok+eooSDVUwjrDvh+R2/jPc/UaKorykOSMlHJip5jPKyJhv2el4QW+G8bVMEAYd",
	"uNRfc1ic4vmL/1pFz28Md96lAewjmZLBrcdPLJx67PTPH11YqDn4jwOYVBAFYEKonD4tDT9UkeIw/CzC",
	"G4c9DIc6CH+KSmAp2aRf3N9/+87D2y+qXtz1Kz+ExMQTEqnX8dJVN/z3376z94cXVIafSqZVjjYzgVKs",
	"+ojRGIZBkvOGP5fso8x3PjPfIE58rwGhlQ9L2A3IhU3osX8u2VehD/EmXYtespegCPzdbmXw0zzl3eHu",
	"Z8PdOzzr6YvTNALsVpt+5epl2ayF/IdJwYilqljxIRZJ7VjIW6nK1nDnryGOQ9k/K7DI5ZonzKwefGsd",
	"IfcJDLjk0PEI7ECsFwzuvb/35eelBH/ByK0jTC55BCM7sKrD/sGf7w1f+M3Dlz7c++LTB59/+f3Xr2oL",
	"3FRKf0Kep2Vy+tjmvCFEesrj57zjWwjbs5rvx2zmbZ2D/NhIkGKAvZAGOXaugH4cWXhOCAaevwbxU5Wh",
	"sf/b+w+/C0Hx4LsPquGC4yGvyCvY2aTTFbJW28ZRabdKivXa/su3tZ1nzcE+qa6ivdfv7r18d3RqvwIe",
	"GIfiT4c7Hw13X/mZNmXHXwJcRjFKdrR/+x97d94TZkcuGFd9997SFiImNp727r01svZ6AEOPnBkHlw++",
	"eGX/9ns/3P7bg3+/u/finRFhyhg4B123t448+FTQXWWlrLEZ2X/9q73/3v/h7a8ffvDpgzc+3HvtCwlT",
	"lLDHCKcsPYm6cNIs7b391d6//iRnScxJdRTmNfLJa/ovQtMYW/qRdZ/fh4hdMOcg2eCWDz1JQOD5N5PY",
	"y2lVhr+8Y6QRPirLHPpFQlyaCX9Emjgq0BwVaJoo0PhPQMWm5KqLciKpNmX52Z5evQEt+ltB8jzbjEyR",
	"IVnFiEk0GjtsLsbUGfb8wKSUL9lCW0nLUuFndNfIPiP+VFFyEqGkmgzXgECv0vpQuBrshfgRsiwwxyXb",
	"MAXVn0jzxTJQVicxrfD/MqNyhtCvD0SrWonJ5Ate0bqUiihYoKpZFu4pSIhSNQl5zS+HAFO4ly6HJK40",
	"EV9I5xvBH2pDdZ6bEZFdBl4pZFV6PlDwFCmwSYgK6VUExDWgQkGRJ7/Iy9SUUCWplSYlFZkS5Zshi7Qe",
	"XeQNbsbtfImdcqU14ELPBvgZB26JPb9MPMgq4aOJjlndfFVYmUg/J9AWfZ5TUMyBKc6POBE50hyd62Vo",
	"jHSZ0/mFVPw50Gz6uYO8Uf07qw/mpJntEUNLvWNbMSeA2FhF5gTW6wHLIX3BToKG5dYcz/HXz0dFzuLH",
	"GMJzSgJNmPeimkmc3doqG7FMACbSqXzFpzkU8FQlWEjn41StiYqLgid4GczU/DljifF0Na+qSWJJFQWO",
	"cKaNM5ZrjRPSOCuzELLiMzVqBjYtcMsxXAb7ccEdq0gD5Bnx9be8VXgLVOm2JXENaS6uSrfpbInuRTvb",
	"oeS0w7Uom5jNPDluJtbMOJmpCCCBIInzk7+XZErRwOyMtJHxouNCYeRS1kHgLQI9X/4OjOcccam5sew8",
	"D0dET1KPGBlbGvCJJDFTHEXgYZxmFaFRMTELRi3tJR01anFTMlcNLVwaqRgtCWuZeeYVJ1PBQ6ruawi5",
	"guUl645Y0QkXmbHptOIoXeVtGM40wosv/zaRdQsBizib8LLTdcR2iaWSV15UBRt1W5BeIw/NLQIbekS2",
	"31dnZYgnLe+04fUkEszkdJ23TNSHM5FX1fgtM/n5nWILUUpI2gyz7vgEYQdWgXoyLcP8k3SqfinsU5IS",
	"LvnpisF0HVobsrxa3dxTGuL6EGCRF+REoMNyxMyEMXH0qtrbo+7FKe+dUfW4KPtUSvtKyvs/9Bs09Psm",
	"SvoayhoPZq9JIC+xuHlA8H4ZqS6vF8Vrr97L+x1jAdPX2NFbcPbeguyxBt5b0vNLFTZWorkqb6wUnm9q",
	"Y2WMbqGmNlbkZ6y2EN6oYqnwh6mazltmK0amyFBmCq3uoirM5beP83u2KgtMirpku3graaxSGzkal1g5",
	"7ZYROIFC+lndJFaprUk3HrXZTR8QbNYyKJZvyYxeRxFxIIFjHZ6QJSuu31R3gxFbyBS2mHXHKGhxOl6h",
	"8EpFBUxPIUlBKsuBxj0NN7Y0usXCQZkp9a5WGM2YebbLzv+PxHfmvqBc1Tz9oKxsHo28Ts99QSvADukv",
	"hz4b3Y4EAYY49AfaVEl/u4hwFxBj0fjls9eM6GIaSoN+aiSevE5IjzV6Ot4aosywRijjvNNxLIRDdG9C",
	"zOqnxsnjJ44vhMhAPeiBnkP/tHD8JF1VkXXKTnvVRR36T/hbB5JCMmU8AUkrHNByHZ8YdDacbMEZ2Z5R",
	"uloDXUhoufC5MPs1Fo2bAcT9GHCLBlpb8yGJxQTiCoP4URZ6WKaefzix7HWTv47qkYWFiV01lOuRFdw5",
	"lCpqYBqnFk7KZkxYbHN3ItGHTpU/lNzpNDCN00xA9QO5q6jSFmXWJUfR30O+wPyhk1H7F0zPXWLEvAD6",
	"5Cyy+xNUOH9VkkDjLLTEHKauSHAAB41hIWpPLuFvDGvFoYT6VTaIPHc9hHzOmAMz49ntbdYIOWDGdSGr",
	"ufFsnqd/FxuafZYTVezsYWBJHTZpwOTNUsF91friLntrTMmmOl6qQuVUdNgo7BMtHMA4GAisukLL2JJA",
	"GDRp2HqibKBhU14HR6GWD7UEqHMoAtQpVJjvTyyDaiYE0AVu0Q6JpHOVAxEgT4GY7WrOgCTajlBPwLSc",
	"MqnKqpmbike2t+mKWyf1Edk3zXwSIXVCe7zKP2xpj0iFeZA0qr8GkR7LP1/5jjDoBY1ZtM5cR2VMTvpZ",
	"i6kZ5hqNqTA+NyT1fzpCmuSwc0cHKMVhDCsu++7wMs+862vanBk6Y/T2dtSYPig3v9TyF5Le9vJwke2D",
	"n51XACeGDiwOAyLa29xRBQ2EtDIPlKHlau4YRD3QMYUz5Y9gzCoUeR1phSvMH7Y7bBhtd6HGgqDb18Ar",
	"G6u65/EItGOB1lYYY96gK8nFo0W0Fh5LLh09UGCsK/tXKUiAxCWx3pteFlTyHksBnXkM/G58Fk+agtAR",
	"LXZZbCH1YEf5ajclIyMw2+WEuexKPVR/Vr62lW13EFYsn4HYWeu36JOioiXf7VFr6ZInJfmenpbjrdEu",
	"iCn4lhaTsUP57IjmBOovGat2k0aZNnPYXyetMkLrxi+E5LEWsCwUCBZfojYc2jBfq8mFjT+iyCoSoHHb",
	"63IbQ4CgJKwW+afxUad2m35LWtU4XHNYTYWLUOonp5OlwZUNkUXX6Hhz7eE1oiMyYcqfxBWZBBOIsLnG",
	"tFr9LUdrRmNsOZe1Btn05LsQvuzhFhvVoufXhBhms9SPYUZHZErXbbFv+vNbT8fsAbe6tiLt0PPb7W5y",
	"tlzq5OEAaZGXP6LegJqy5ATaSpmdl3Q3slTZdnWkf0FgKliovrhUZp2VnouA3cpw0uSKir/RQr57vRY1",
	"1Ddm2KxDbrOO7UGpSyq88WLc9F2++E/6w2epcFRqqEQH8+fkIRZIdNuDfOMdIVeWddGrImo3EaUisMy1",
	"mLMRhKfiMsnjdZBU8nCA9GUUrXTq7Ur3IbSnvVO5UrJk6XCamhcnoeBIcRJV9aVQ6fZbPYxkoTK6caQR",
	"U4nrjFljZXidM2up+00UNkq/Q6rO2rDcPEtZ1ppOVcpRExQUOD+liKKjt+30Ahqpw0dj1CVf/j6bhgwZ",
	"kxPY83yB6Ykoiq9oBPKCRqw0cWFD9j1c9btknuIMFjm0/HT82kZ1LORvo1C9Kh3+GgyJ3+Quy2hEuxzN",
	"8vcoJ8hhe5kqrSj+urr6XbnMgEsFvqfjxrpAC8Tqnuv3by+9RU2ZcEfDpAHkSjKgEZPG5DTS73jkYUu/",
	"JRYrfJlk/XFCYaylLKOTiA6jA0gjEc9CaG4DQXqLn3rlTYeVr8DjWwGbCggROZ31OC/B0bo8Hxgylqs5",
	"MMiNNgOrdA1IZRfrAlTNZazYZnfxDMrLuY79E78sUCR39pVvaSR3AM3SlkZGBp26LaeSea3fxgiZ+DpV",
	"cFPjHADnaB3MQWgL4Y2xDuHH12weoBNqMcsH+hC+pqlD+1Y9o5+atsZuB4UxpnpGn7s5ddpn9CMrZh12",
	"Imf0OSEP7xn9xElGPaM/Pf01iPQDc0Z/5JA4+hH+pgxe10qwzNZTPcI/AnPNh9yt6B5oaYgIByizJHqT",
	"9CG57TGRV2DGVFGHKcnaYtYXZ1kRNGpOs2QGiVKZrZSJpr0+c7d1CX/Tcfz2NrveWSfbEho6Tbcyouq8",
	"P5JrpQ9bxiVUYxEuzeqwUdgnWjhUiZc4TgZN2r3O5Ettcl4HR5GYReL0ZNK2oHcJeiQSuuXTAz58MmSE",
	"mVJOyz7EhbHs/GJhLD06Xhgc31OzLerbzg+mjdnFsVF7fmF43MRefCK0S2F4ZIv82LMu6hTGsjs+rw/+",
	"HwAA///6dJFGiqYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
