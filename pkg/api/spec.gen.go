// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"g/8GAAD//5mkrcqahgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
