// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
