// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
