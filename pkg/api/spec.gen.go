// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0DP75fb53vrVwf8DAAD//5993aIKmgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
