// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p7YohFB8iD3fmJz/Hlwb/D8AAP//G+e/hROUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
