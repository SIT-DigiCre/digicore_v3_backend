// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY34/jNBD+VyLDY7Qp3CGhvnHAnQ7dAdplj4dVVbnONPHh2tmZSaFU+d+R7Wx/pElb",
	"lnbFWxOPP8/M92Vm3LVQblE5C5ZJjNcCgSpnCcLDG5nfwmMNxP5JOctgw09ZVUYrydrZ7DM569+RKmEh",
	"/a8vEeZiLL7IttBZXKXsR0SHommaVORACnXlQcRYfJJG5wExAW+TJsDqRjSpeG8Z0EpzB7gEvL4ndyti",
	"WHS9+NnxW1fb/Prn3wK5GhUkuQNKrOME/tLEW1furay5dKj/hhdw57uaS7Dcou6npUlb9CCXCDFeiwpd",
	"Bcg6qsjAEoz/wasKxFgQo7aFD2QBRLKAnrUmFQiPtUYf4UMLsd0waVJxC4+/OuIPrtD2e2nMTKo/Dg9X",
	"Lj8DP1jtgN7pwtbVpVHvCfAjHKJp5ey0xv4ckSqdM9MC5d6R2jIUgMGidMhTAjOfasvo8lpF6nrQavKf",
	"0uIM5zeW6da/jjfDR8eg6R1Eeg5D7o+26wKaHaTIyWWgWHJNh1C0ed+izZwzIO0BXGu4RRyiVirWS5ga",
	"vdDcS0iuSTnMpz7dOu81eUF5ENc5WJ7aejGLpbZXQdMBT/+dujxKuquzzunHhNdJ23CU6T4FLWNnFI7P",
	"f/LpMLzRDuSpsvEczCFlUa0U0FlibS0noVyDqlHz6s6X7bbLg0RAX+b90yw8vXW4kCzG4qfffxNtkQ9n",
	"hFWRPp1ZMlexaWg7d8EZzcav/KALrRx6spaAFHvJq5uvbkZeKa4CKysdXo1uRiIVleQyuJOZp5JRQEjX",
	"fjt6B5wEi+T+9oMISBg60/s8rsaKk+5PMl+PRhfrlLuFradfftg459dYFuRJ8B07MhDjy9SuShz1RPoJ",
	"UM9XSdjZjfNQwJFzIH7j8tUFY+1psgNDQuIl4GUTv7utBBlraK5LyFlO3sUPIaHYSZpUfBO96APfeJt1",
	"5s8BVmnTngZlG02GdNv2t6sLtz2nLz9b/44GeQHtdirlVcXbOet/qt7TXl5XvpvRp1e+cXMSrRJVQiDt",
	"UMMR5foajuf0UWlMEi9wlPzy5J40z89WyI4fM7I41wx+3YtVUqGbawN9mWnb+NUz055zRD7Fvq9NKl6P",
	"Xp1OzN6lM2x6fXrT5tL8H8T6NLGI8cP+rPIwaSZbLXuKwtzUX5Duq1wyHCNpZ9i6ajkaZujjrnMvXoBO",
	"K6c+yGHQwRm07vyR9Fy9vYx84g6/mcKG/UTksATjfI8O17Ew/Y6zbF064ma8rhxyk/mBV6KWMxOpKjd6",
	"nMva+JnaOCVNeB3kip3lb0ejkadh6936+F8yFOqdSEW8e8Wy3qQHnwD5Ct6xDXE3k+afAAAA///+AmGQ",
	"CBQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
