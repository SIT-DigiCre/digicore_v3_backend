// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYbW/bNhD+KwK3j0rkvgTYDPTDuq1Fh3QbkqX7EAQGTZ1ldhSpHE9ePEP/fSApv+nF",
	"TlMr6DdLJJ977u7h3ckrJkxeGA2aLBuvGIItjLbgH97y9AruS7DknoTRBNr/5EWhpOAkjU4+W6PdOyvm",
	"kHP363uEGRuz75ItdBJWbfIrokFWVVXMUrACZeFA2Jh94kqmHjECtyeOgMQ5q2L2QROg5uoacAE4PJPr",
	"pSXImyx+N/TOlDod3v4VWFOigCg1YCNtKIIHaWlL5UbzkuYG5X/wDHR+KmkOmmrU/bBUcY3u5RIgxitW",
	"oCkASQYVKViAcj9oWQAbM0sodeYcycFankHHWhUzhPtSovPwtobYHrirYnYF938aS5cmk/pnrtSUi3/a",
	"xoVJO/Bj9nBmeCHP3HIG+gweCPkZ8cwfWgQtugMbFlWTk0feIXItM10W3wKTGwv4EdoMpDB6UqI6BYs4",
	"l/rNizjnD29eXlyslWCMmmTI9xyVmiAD/DobPwYLc4M0saBmE6kJTVqKINJB/CmtKzs5DALfSOHGVrzN",
	"UiOi/e6H1Nv3EC5DO/GdOW9RQLWDFNR8GijiVNo2lN28r9GmxijgugVXb9wi9gmcC5ILmCiZS+osOKm0",
	"wmA6ceGWaeeW/ktyXOJfIlG3l8oUNE10mU9DY2ttcUQnPUz79dmlLocS7+qsYf2Q8Bph6/cy3k9BnbFH",
	"lOnP/9JxN9ymHchjBfcpmH3KsqUQYB8l1nrnnS9YIEqUtLx2TbKeqYAjoGuq7mnqn94ZzDmxMfvt779Y",
	"3VK9Db/K4rXNOVERaofUM+PJSFJu5ReZSWHQJWsBaEPnfnX+4nzklGIK0LyQ/tXofMRiVnCaezqJWpeM",
	"DHy49pv/e6DI74huri6ZR0I/B3xIw2qoOPH+3PhyNDrZXLJb2Dqmk8sNObcWKvAtc/NRyEDwLxG7KjG2",
	"w9NPgHK2jPzJpp9tAYecg6W3Jl2e0NeOkaZnJIucBJxswr3bSpCwhGrYhDyK5HW4CJENnaSK2UVg0QW+",
	"YZs0pv2erNpNe+qVbdjSp9u6vw0u3NpOV3y2/A46eQLtNirloOJt2PpG1Xuc5bDy3Yw+nfINh6OwKxJz",
	"8ElrazigDK/hYKcrlUpF4XPZRn+s6XH19Gj56LgxIwlzTe/tzpdRgWYmFXRFpm7jg0emtnNAPtk+1ypm",
	"r0evjgdm7xPfH3p9/NDmL4qvEOt6YmHj2/1Z5fauuttq2aXIz03dBemmcN8/h5K0M2wNWo76M/Rxl9yz",
	"F6DjyilbMfQ6eERad/62e6renkc+4YQ7bP2B/UCksABlXI/2n2N++h0nyWpuLFXjVWGQqsQNvBwln6qQ",
	"qvlGjzNeKjdTKyO48q+9XLGx/MNoNHJp2LJbHf4DzPp6x2IWvr1CWa/i1hWwroI39nq/q7vq/wAAAP//",
	"kYmf13YVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
