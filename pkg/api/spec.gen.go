// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
