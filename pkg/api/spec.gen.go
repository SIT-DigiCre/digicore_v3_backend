// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
