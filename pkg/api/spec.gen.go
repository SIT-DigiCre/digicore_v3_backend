// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
