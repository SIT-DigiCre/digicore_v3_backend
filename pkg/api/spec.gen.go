// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Q9MNXX6wvKEbXR/9PwAA///Q7ajAaFIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
