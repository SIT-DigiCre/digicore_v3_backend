// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/cxrX/KgveC9xbgPbKsZ2mAvKHH5Gj1koMyUr+MIyCIkcrWlxyPRxKVoQFHKlB",
	"86ibFEWaognQpm3S5uE6gdOmefbDbGQ736LgzJCc4Tw4+yC1WekPG7Y4nPP6nTNnDs+Mdi036vaiEIQo",
	"tuZ3LQjiXhTGAP/nvOMtg5sJiFH6PzcKEQjxP51eL/BdB/lR2L4RR2H6s9jdAF0n/df/QrBuzVv/0y6m",
	"bpOncfspCCNo9ft92/JA7EK/l05izVvPOYHv4RlbIB1jtwByT1p92zofOOHmSuK6II4nxkc2n4QT+qiV",
	"qSLlYTFEAIZOsALgFoD1a2NlJ0agW9bEMxFaiJLQq5/+MoijBLqg5UUgboURaoFbfowKVlZDJ0EbEfRf",
	"AA2wcy5BGyBEdFZeLX2bzo7BQaaY37V6MOoBiHyC5ABsgSD9B9rpAWveihH0w04qSBfEsdMBkmd924Lg",
	"ZuLDVMJrdIrihet921oGN69EMbocdfzwghMEa467KRJ3I08yv23dOhE5Pf9E+rgDwhPgFoLOCeR08Es3",
	"HGveevThnUd//3qwd3+w//Vg/xXLtraIm6Tz5Mz1y6xiggx/Sw5CAHajGF2AwEEgiYFER6HvboZOd0RW",
	"B/uvDfb3B3v3Bvt3MLd/knNrd/3wydN217n15GOPYSX3nDjejqA3Kt3fDPa+GOzf06kIE30CE338DCaa",
	"qmAcYd9Pye39a7D/9cEbd8wkLRkp58AuNM8ogzHfit8Jk94U42sFRdDpgKWddT8AIn/ZT0fR85uDvXcH",
	"e38d7H+kUrJz68lTc2eeOPvjx+fmsGn9+EqyFvguQ3ItigLghEY0D176+PvfvcZRC5MgSGceBzCFIBrA",
	"pFA5e1ZUOAUHViQjIGOC5yO4edXpiMrnAuloGPn4we9/rYTGWFrZ+89g7xOlPpR6YGUq6SD9IyqBrFX4",
	"nz4C3Vi6EtAfOBA6O0bsf/fNO49uv8Tz7vlbwE4Sn6imfuWnkJi0XGqv46Ub3fDfffPOwW9f1BnetrIX",
	"JikYxptapGq02TmUMtVTRjMYJuipLRCSvxa9ZRADuIWTlkVvCchCd7dL06ZR3Of+YP/dwf79wf7LvFBF",
	"ILGtBAajTb+6fFk1q7AeECkIsUIVqzGAMql9NwpXR2VrsPfnFJqp7PcFFrm195TN6iF2N6IouAQdbrH0",
	"QwQ6AJqtDHffP/jis0qCPyHkNiKIFkMEIy9xRw8AD/94d/DiLx798sODzz99+NkX3331mrHATaU4p9Tr",
	"FpPjZDbnDSHTUxk/F/3YjaA3rflPxmbZ1iXIj40EJQZIdlJi0ddp9Iqzk0UdnksEnTBeB/CZkWHz4Ff3",
	"Hn2bAubhtx+MhhmOB4Fz6G/h6YQV3vMgrQ+Mshy9/uCV28aOte7DGI2uooM37hy8cmd4aj9zQmcciv8/",
	"2PtosP/qj4wp+/GSw2Xuw6TRD27/7eDl96RpdOCMq767bxkLkREbT3t33xpaez0HghCdGweXDz9/9cHt",
	"976//ZeH/3z34KWXh4QpYeACCILeRhSCZ5LuGtn2j83Igze+PPj3ve/f/urRB58+fPPDg9c/VzCFCYeE",
	"cMHS01EXTJqlg7e/PPjHH9QsyTkZHYVljXzyuvkiaVtjSz+07svFrMwFSw7CBrdy6MkDAs+/ncdeTqsq",
	"/JUdo4jwdAt71eksekd3H5vk29j0j0wTx5vZ481sE5vZ+BJA5xOvk/0txSKp9ZNcUlfal0337NoN4KJz",
	"+RT9jCH/BeCdQ1I15QPgGBSLOfq2tYafSbaE+bNFT8qKGzix3JYurrJ75+TviSgfTYwFPwACctLFJYG9",
	"KAZS2jFAKAClkgMjcIwclCgA6qNAPmnS87C4qPojSq7QbL5MjTlpm8FUbhyO8UJCDg4Fhgv1lwDFsqrC",
	"eBmU5sULuuVWoEW9G5dtmrGGJLvnCq455/jBsL2g/GqgYMqMIToBHV6wgGtzIj2wlX0DH8Iv8VxECjKt",
	"4I8lpiiVEje0XCgpbTgBCD0HPueDbclGrGpV7tuE4HB6TDnGdcs16e6veI6Ap3/uR+FIGqX6IIpliqhm",
	"6i2MXl7vOHVyYnIylQSQG0tkTmK9nuP6aEcea6sst+6HfrxxkZY7xMcQgAtaAk2Yd0HPJGQL4FUjVpAD",
	"kXKqWPO0hAKeqgILxXycqg1RsSB5g5fBLsxfMpYcT8tlVU0SS7oocIwzY5yRxW2ckMZZmYSQ1Zio0TCw",
	"GYFbjeEq2I8L7kxFBiBnxDf/MKbDW6LLb1yFayiTH11+g2fLdS/7/iXNDmZjfa9lzS20dglGSU9UVSf9",
	"8bCuh+ciFiDTVvkZpVLiBv81dFWqb5PpFNa5Efmh2gTpU1VcVDtADOCFKFHt7kYJXqz8Q8SrTHAFKApG",
	"GT3kQosxRMGF2MOm00x9IaDEKAs4OY6nBBJVRtObqZAaN0CKosrjcVmpXMgkvW6TmSqvZfBTCTUOVWCj",
	"A9kZcZ/bQr4zLQVzWneQr1rgFgJhrE72lbtdTT9b37Y2V/wXwJDLpKZeU7GIekNsu3NvoWAinLKKYGSz",
	"Ge2xHNqCUStbDYeNcNyUutKaRNBYxZqusjEjODkUPBTqvhpFgWRBJs0iqybhghlbTCtfV0ZZOdOZhlgx",
	"y0ueqnnKcZG/BS77XV9ul0wqdU1PVwrUd0mZ9TXhTVTigRCpPnHWWXPkSasbj3g9yQSzOV2XLUPbkiay",
	"VI3fQWTQ/1MQUvb/bPgxiqAPRoF6Pi3B/NN4qp1K2BckFVzy04nBdAO4m6qsSN/PVBnidoADDdImPKxE",
	"zM4Zk0evUduZ9O1H1e1CurYebWtOZStNdcuLeU+KeatIRStHVa/F9PVFlCWW90tI1pehvviYRfHavwup",
	"2z8zAYtl7HgVnL5VkLzWwLqlPN4iNFZUL1Z0LuI66aRVS1SpJ0J437wKgbLeJr0SyDChtjBGg5QuzR+F",
	"KVnvUsai/AjOdgQ3R7FU+oeoGs9bZStCRmSImcKooWoU5tiP8LLGDJ0FJkVdimcbq8XEyHRcbuWiQUji",
	"BBrpp7X9QKe2Jt142P4+c0CQWaugWP3tefg6iowDBRzr8ASWrKo1alQ3GLJrTmOLaXcMQYuH4xUar6yn",
	"L8jgGP+NbYMGt3QQM6XZyfvhjFlmu+p4+FB8M/dslKrmxYOqsjkdeR0fgwNuAn20s5L6LL1VBDgQwNQf",
	"0v+t4f8tRLDrIGve+unzVy16oQOmgZ9auSdvINQjva1+uB5hZkhbonXR7/huBFN0bwFI6qfW6ZOnTs6l",
	"yIh6IHR6Pv7R3MnTeFeFNjA7bdJj2N7NehP7+CsNaQnlr6G4BFCru9PKmxJT/eQ9B5bYLov3bk4XIFw8",
	"vJbmwtY8ppyhb57tiCyUiGACbObSjLLtrtv8RS2Pzc1N7BIOaeOv5pqUDkCZRvq2dWbutIpAznGbuzwE",
	"v3Sm+qX88pO+bZ0l8upfKN3ZwqIRG4PF4bXrqU7J6pN1qRIAt0H25V4JCTyiFfixFBPky78cCjcTAHcK",
	"LETr6zHpdi1bvig91W962siotzgj86xYnRiaMXp7l7Y29KvNr7T8U3l3RHUsYJt8picUcGKYwOIoIKK9",
	"y/VhGSCkxbxQhZblUo9XPdCxpTOV+8umFYq8jozCFeQ7iY8aRtskw/RAABAQkXoR/zxNcKrxSsbqrro4",
	"Bu1YoPU0xpg16NpWL5FETrJjMsNjxb0rPygw4gsXz0fezgRxWHUxjQSJS3K988L0p9N7XA10ZjHwd7JW",
	"Q2UKgkco9yikVXFiexRb/moMSAf6YW5uaBewPltglDUraCEIYdDS3qXdnn0D3Pje/8WtHozoBXRy/FzK",
	"u0erg23RaTpNKzUnhhFGOMXMIlaCrLNXiRA8okVu4hKAQRqDazccISOx2OWcueIU/jVcwGfla7ts8TSK",
	"JZI+B6C/vtPCbwrJh1A7rm8ZF0gpbstt+eE6rqkewqptxGTmSzFp+B4D1RKrdvOye5ukAj/PC+9S62ap",
	"Zv5ay3Fd2vcu2rpc1MftN7WaXPoZQZazyQRo3Pam3GYQQFGesIn84/hoAAzmrvJR43DNYbUQjqI0zs86",
	"KIMrGaKKrvSwRO3hldKRmbDgT+GKRIIJRNjSZ65a/a1Ea0pjbDWXtQbZ4hyNFL7k5RYZ1cLdsFIMZ9d+",
	"1I1hQkdmyiBokfv249azGXtOMLq2qHbwaZB2Nz+ponTydIBya8YfeGlATSw5ibYKZmcl3aWWIoUoaWhK",
	"na0l3fuIt5/XG5eqrLPaCyLHazGcNFmr4c/HSdijeVa2W2rMsKxD7pL+j36lS2q8cSFrIane6ebdJtO0",
	"0a00VK6D2XPyFAuInh1T2j8doMq68MGz2k2EqUgsczXjbAjhsbhE8mwfpJQ8HaBcjOhOZ/bLhKsVW5YO",
	"p6lZcRIMjgIn9HuhrhVKUxOk5xcbMZX8CwZrLIbXGbOW4uvZKj50prNRcUF/nV+d1OZZYllrOlWpRk0i",
	"KHB2ShGio7e94jir0uHpGH3Jlz8d25AhM3ISe14UmJ6IoviKRqIuaGRKkxc2VL/koH6XLFOcwiKHkZ+O",
	"X9sYHQvls226pdLnD9Up/KZ09K4R7XI0q9dRTpCjtphqrSj/XSD1u3KVAZcEvg/HjU2BlsjVPdPrb6+4",
	"k0GbcNNhygByJR/QiEkzcgbpdzbyqKXfCosJv42n/jihMdYSy+jhRAcDKCWCVmc7JhTXg+g34XhY9WY8",
	"u26kKYNSciZbc16C4y16OUYwlqs5RqiNNgUbdgNIsft2CapmMlbskkO+/erKblUnH3PnisnXjfxw8TR9",
	"3WBkMCnhzmQPnwohE9+ySq6AmQHgHG+JOQhtR3CzjchpfPU3M6ej/HCU3d/zAzoGm7EssX4u6ayYOrVv",
	"Vf8DwuYT2x8K09bY+KAxBu0pQDkLTWYl3JVMeuYasyLrsO1dfN1G3+Dcn8y+5BEnpElwz674GDu2V+Rp",
	"gRNuZhdWNOgkugioCX6HoL8GkZ7JP3shUbN1k8bEpDGD17UTrLI1J/20hVyGueZD7ja9YE4ZItIB2iwJ",
	"X1FXd4sNcb1FaZtNwzGF3OonmrFQ1FFKsraJ9eVZFoVGzWmWyiA0ldkumGja65lL8yr4OxzHb++Se+NM",
	"si2poYt0ixHVZP3I76s7ahmXVI0iXJrVYaOwz7VwpBIveZxMmrR7ncmX3uS8Do4jMYnExSGlXUkbEwgR",
	"FboV47M+fDJkpZlSScsxgMJYcpRRGIvvpxAGZ5dh7cpauMuDcY+2OJZ26gvDs3528Y3ULsJwagshhOJD",
	"7OXBHfqb0sqjyW2AwvDs8r/r/f8GAAD//2Ob/U9NlgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
