// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfW/cthn/KgdtQFtAyTlN0nUG+keaNKnXuA3suP0jCApZos+KddKFouxcjQNS34Kl",
	"zbJ2GLpua4Gt29quL1lapGvX132YqxP3WwwiKYmUSIr3Ivly9h9O7BNFPi+/5+HDhw9524YdtDuBD3wU",
	"GvPbBgRhJ/BDgP942nKWwNUIhCj+yw58BHz8q9XpeK5tITfwm1fCwI8/C+110Lbi334OwZoxb/ysmXXd",
	"JE/D5jMQBtDo9Xqm4YDQhm4n7sSYN160PNfBPTZA3MZsAGQfNXqm8bRn+RvLkW2DMJwYHUl/Akroo0Yi",
	"ipiGBR8B6FveMoCbAFYvjeVuiEA7L4nnA3Q2iHyn+vGXQBhE0AYNJwBhww9QA1xzQ5SRsuJbEVoPoPsK",
	"qIGcUxFaBz6ivfJi6Zm0dwwO0sX8ttGBQQdA5BIke2ATePEvqNsBxrwRIuj6rZiRNghDqwUEz3qmAcHV",
	"yIUxh5doF9kLl3umsQSuXghCdD5ouf5py/NWLXujOLgdOIL+TePakcDquEfixy3gHwHXELSOIKuFX7pi",
	"GfPG3se39/713WDn3qD/3aD/mmEam8RM4n5S4np5UvGADH2LFkIAtoMQnYbAQiAKgUBGvmtv+FZ7RFIH",
	"/VuDfn+wc3fQv42p/ZuYWrPt+k8dN9vWtacefxwLuWOF4VYAnVHH/f1g5+tB/65KRHjQJ/GgT5zAg8Yi",
	"GIfZD+Lhdr4c9L/bffO2Hqc5JaUUmJnkGWEw6lt2W37UmWJ8LaMAWi2w2F1zPVCkL/l0FDm/Ndh5b7Dz",
	"z0H/E5mQrWtPHZs78eTJXzwxN4dV64YXolXPtZkhV4PAA5avNebujU9/+uMtbjQ/8ry453EAkzGiAEwM",
	"lZMniwKn4MCCZBhkVPBSADcuWq2i8DlHOhpGPr3/p99JoTGWVHb+N9j5TCoPqRxYnnIyiH+KQiBzFf7V",
	"RaAdCmcC+oEFodXVIv/H79/du36Dp91xN4EZRS4RTfXCjyExab7kVsdzN7rif/z+3d0/vKpSvGkkL0yS",
	"MYw3OUvlaDNTKCWip4QmMIzQM5vAJ/8sOEsgBHATBy0LziIQue52m4ZNo5jPvUH/vUH/3qB/k2cqcySm",
	"EUFvtO5Xls7Lei3MB4QLMlgmigtWN/6c/rfgCPhfB/YGcEZ01YP+q4OdD0nYQRAZoBERubvz573rfQFr",
	"lEDad8bbMrJQFJ72otWlIGgLIs6ATNUjsXWH8PTg9S/v37hFrCHYAP5Yk3z/Jg5Z7ur6WsxAMnDG90oI",
	"oAjJrh34K6NCbbDz99jdxHi+V4AdF08dM1lsh/Z6EHjnoMUFQK6PQAtAPb3f+WD36y9KB/wlGW49gGjB",
	"RzBwInt0p/7gr3cGr/567zcf7371+YMvvv7x21vaDNcVth6TxyJM3JronFeESE55/JxxQzuAzrTGtAmZ",
	"eV3nID82EqQYIBFnjkRXJVHqZItUImj54RqAz48Mm/u/vbv3QwyYBz98NBpmOBoKlEN300ICl2I5DqQ5",
	"n1FCjDfuv3Zd27DWXBii0UW0++bt3dduDz/ac5ZvjTPio4OdTwb91x/THtkNFy1uNTbMxHT/+oe7N98X",
	"Lo08a1zx3Xlbm4lksPGkd+ftoaXXsSDw0alxcPngq9fvX3//p+v/ePCf93Zv3BwSpoSA08DzOuuBD56P",
	"2qsklTM2Ifff/Gb3v3d/eufbvY8+f/DWx7tvfCUhCg/sk4Ezkp4N2mDSJO2+883uv/8iJ0lMyegozEvk",
	"szf0J0nTGJv7oWWfD9gSE8wZCOvc8q4ndQg8/WbqezmpyvCXN4zMw9O0xEWrJYr+D0puIkpTE/GPSBKH",
	"CYrDBEUdCYrwHCC5iSIEwWayB5gypNqrYfp6YfUKsGm3ea7zJNNRctTQdIlgGWB5wHcs+KILtgRBSxmC",
	"eyYZcMERPhPjA1OM8zarwkgpe46EmQvmuRv4I0mUyoMIlkki6Yl3AacrRNjgxMmxyfGUY0CsrCJxAu11",
	"LNtFXcHaXENza67vhutnLCTW0RoE4LRygDrUe1ZNJGQTgGUtlpEFkbSrUPE0hwJ+VAkWsv44UWui4qzg",
	"DZ4HM1N/TlliPC3lRTVJLKm8wCHOtHFGElDjuDROy8SFrIREjJqOTQvccgyXwX5ccCci0gA5w77+xoAK",
	"b8JUP1Xagi0xDfzQKXcqtB3TWyp7Uf5fGB3MxvxeyZybSe0cDKJOUVSt+ONhTQ/3RTRAui2zMzpKjhr8",
	"z9AruJ5JupNo50rg+nIVxE9lflFuACGAp4OIsxvGUY/ivFj+h/BXCeMSUGSEMnJImS76EAkVxRoelWSq",
	"cwE5QlnAiXE8JZAoU5paTRnXuACsyKrYH+eFyrlMaRq/Qx4MC1/aH9FI0nkZeNOxCnTx/QyxnSvdnMV5",
	"O2Z/WBCPRA7wkSyzFvOi3OEYAt8ZIWaGdX783GjctjAjJ8WW92yKQbhPHguEFK9NxDbIlnuxqzD9vGSm",
	"pg3zPQ69iS/cKmd7xeVwZ10PCFcyuAbTOSUO7sA1BPxQviZO+iw8UpS99UxjY9l9BQwZTXYcBZ3KWFMD",
	"ZJQTBmHU5xJKWUEwvJmM9FgKzQJUSisSh/WkXJfED8YaLnWmZCwJaUw/s4qTfcFDJu6LQeAJ4lZSf7Ci",
	"44SYtlm34vBrlAAz7mmIwDIfGcrqcSwbuZvgvNt2xXpJuJKpx5RX9JQW3uiVymhNapGcPnktjDJupbDK",
	"z2eyWhZeTiLGTE7Wec3QSpeJTIDjF6VolJRkA0nDvHU3RAF0wShQT7slmH8Wd9UthX02pIRKvrvhItPy",
	"yEnp4rrAghqrC9xMETiJvNeoFTLqipbyChRVpYiy2qO0OqO8ikK/zEG/+qCkOqBs+376ttrzHIu34AXz",
	"i37hprYXr8xHMz5ZUlGYMJhNY4ez4PTNguS1GuYt6SmYwl59+WRF+yKmE3daNkXlttkL7+sn61BSLqMW",
	"AmlWSMGNUXOjCvNHIUpUDpOQKD6psxXAjVE0Ff8QUeN+y3RFhikSxHShVaMzCnHkt1O4tyKhag1ManQh",
	"nk0sFh0l03aplrOaE4ERKLgfajKqfJopJ7tuMx62ZEwfEKTXMiiWl2gMn0cRUSCBYxWWwA4rzt+MbgZD",
	"FmIpdDHthlGQ4v5YhcIqFRkwPYGkCSmWAo3T/le2UHnncSOmS70D+sMpM0922SnyoehmruPI5eKzB2XJ",
	"eNryMj5ZBewIuqi7HNssvXwEWBDA2B7iv1bxX2cD2LaQMW/86qWLBr33AY+BnxqpJa8j1CHlkq6/FmBi",
	"XBSj1Djjtlw7gDG6NwEk+VPj+NFjR+diZAQd4FsdF380d/Q4XlWhdUxOEyQVDC2ACoGUcQ6gBm7R8NwQ",
	"GbgrmNbjGGnZJV6nWW2AcKLwUhz3GvPG1QjAbgK1eSNYWwsBShi0hLmFyyZ/V8vjc3MTu4eDrRNVXJDS",
	"4nnumcaJueOyvlNim9zVIfilE+UvpVef9EzjJGFV/ULuxhYWZFjuLLwuXY7FSSYVWs9BYEmU3tymJR69",
	"cvVLNf9MWiUiAkAMs0z/bLFTYjAIRkAAiNROa8JDwoYOLA4CIprbXD2aBkIazAtlaFnK1bpVAx1T2FO+",
	"zm5aocjLSMtdQb6i+qBhtElCCAd4AIEiUs/gzxvtrgZeSVvVlQeHoB0LtI5CGbMGXdPoRALPSUJiPTyW",
	"3L/xUIERX7z3dOB0J4jDsgtKBEhcFMudZ6Y3ndZjK6Azi46/lZRcSkMQ3EK6RiElmxNbo5jiV0NAKvH3",
	"c3FDq6HV0QIjrFlBC0EIg5bmNq167WngxnUeCRsdGNCLyMT4OZdW0ZY726zidppmao4NLYxwgplFrHhJ",
	"hbMUIbhFg9zeUwAGKZCuXHFkGIHGzqfEZSd3L+EMLctf02azY0Eo4PRFAN21bgO/WQg+CsnB6qbxwlCS",
	"W1Mbrr+Gk2b7MGtrEZnYUkjqhMdAtUCr7TSv2iShwMtpZlWo3STUTF9rWLZN6/+Lus5nbXF9RaUqF+aJ",
	"RTGbiIHada9LbQIBFKQBW5F+7B81gMHcWT2qH67YrWbMUZR2sjo7qXelbaSRW1KrpxW70Uq0fQ3A0rMo",
	"6umV4/shnliNBMccFBLNczhobqcHMNQxWWxPiYAUmLjAHOcoj8jYwx/TFJMVmFEt+9aBvcGL56F2H2Xg",
	"kSVOimIQ5EvqRklVaQ0dgAglUncm4xDJajcYpifGpJ6PNJEtNuiRs8oVSccRqS+jTxKZEg4msODIbetX",
	"Gn7mxprSJUc5lZWuObLTiEL4kpcbpBWxbyGGSS/VY5iMI1Kl5zXI15CEjRcS8ixvEtJKz2Fm8mraXrT6",
	"MqSnMKWGH7dqxK2oAOWiSw911iTCdLySgDbPQaNjtR6ClFFBdZKYYwUfYinXU/EG7Spjg3IVCQjWclx8",
	"Ly889zBMzxIzxMdSm+30yKzUCOMG0oUof/K2BuNjhxMoNiN2VtKyVFPEBoUxQzwLNoQ5+uK3tVQbMJRp",
	"Z6XjBZbTYCipMxLnD+qL1gskHZVk9WtTLGuQ26QQtVdqkgprPJvUspav7NKy12la/JcqKpXB7Bl5jAVE",
	"D7FL9R83kC2H8An4ylWERxFo5mJC2RDMY3YJ50m+Xp0Ek01GNCM/+9vZKyWp9RYnqVkxEgyODCe0rk0K",
	"lXZXtXdNL1KoRVXiShtWWQytM6Yt9cJBoaPsy2eqXCrI1bPIklZ3qFKOmqggwNnZMisaetPJ7tWQGjxt",
	"oy5N4K/pqEmRyXACfZ4pED0RQfGpxkieaUyEJs44yr7Ap3qTzI84hdlHLTsdP+k4Ohbyh+xVU6XLn+6X",
	"2E3uDoBapMuNWT6PcowctMlUqUXx91xVb8plClws0L0/ZqwLtEgs7pmef3WKVuJYRF6ewF8yVZNKNctO",
	"GMoPXPgtLxUoaqxaP6FQ1mJ3H3fwtaEUFaQ62z4hu6dMvQjHzcoX48m9Z3UplA6nszTnOThcoud9BKO5",
	"in2EXGlTsGDXgBS7bhegalZ9BQQ+2LI86Wp0iTxvkFvFGh6+VkyKN9ramLI8zEHR5za5PUajXLXsBBFz",
	"mZ/OblV6a8007VYxPOik5Gfy7JAMIRNPQQjuFpwB4BymODgIbQVwo4nINU/yPVCrJd0ITC6GfIiu30lI",
	"Fmg/5XRWVB3rt6yeBWH1FctZMtVWWMiiUAatEUEpCXVGmdxdn2riatMia7DNbXyPW0/jvhGRfskjjkkd",
	"557cHTe2by+J0zzL30huQqvRSFQeUOH89kF+NSI94X/2XKJiKS70iVFtCq9qZV+ma477aXO5DHH1u9wt",
	"enOx1EXEDZRREr77uOqSKWJ6C8KyqZp9CrkuuqjGTFAHKcjaItoXR1kUGhWHWTKF0FBmKyOibqtnbmMu",
	"oW9/DL+5TS4k1om2hIrOwi2GVZ35I70I+aBFXEIxFuFSrwxrhX0qhQMVeIn9ZFSn3qsMvtQq52Vw6ImJ",
	"J84OVm0LytKAjyjTjRAfquSDISOOlHJSDgEstCVXqBTa4nvxCo2TS3i3RSX5+ca45r7Ylp68KDRPzicU",
	"34j1UmhOdVFwofjyrHzjFv2m6kKEQu8CIe0bj/oAOI1H6InyRxodANtuGLqB/1jhogJBb/T4ZZExciD2",
	"cu//AQAA///BKeUdG6EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
