// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UzzdNpMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
