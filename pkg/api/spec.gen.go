// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//w/a8rs8rwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
