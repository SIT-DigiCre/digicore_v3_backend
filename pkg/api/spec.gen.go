// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xuF6F6ObAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
