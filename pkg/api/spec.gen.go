// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
