// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wIAAP//Onza776bAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
