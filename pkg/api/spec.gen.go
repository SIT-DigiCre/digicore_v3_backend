// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bPCGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
