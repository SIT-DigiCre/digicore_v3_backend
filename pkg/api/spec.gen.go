// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CwAA//+cNqz9DDwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
