// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eIYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
