// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AwAA///0D+Yn+80AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
