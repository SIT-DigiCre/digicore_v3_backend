// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//vW6RJnVAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
