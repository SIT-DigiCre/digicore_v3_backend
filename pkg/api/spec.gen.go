// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfW/cthn/KgdtwDZAyTlN0nUG+keaNKm3uA3suP0jCAZGR58V66QLRdm5GgekvhXr",
	"y7J2GLpua4Gt29quL1lapFvX132YqxP3WwwiKYmUSIr3Ivly9h9O7BNFPi+/5+HDhw95O5YTdLqBD30c",
	"Wos7FoJhN/BDSP54ArRW4I0Ihjj+ywl8DH3yK+h2PdcB2A385vUw8OPPQmcDdkD82w8RXLcWrR80s66b",
	"9GnYfBKhAFn9ft+2WjB0kNuNO7EWrWeB57ZIjw0Yt7EbEDvHrb5tPeEBf3M1chwYhlOjI+lPQgl71EhE",
	"EdOw5GOIfOCtQrQFUfXSWO2FGHbykng6wOeDyG9VP/4KDIMIObDRCmDY8APcgDfdEGekrPkgwhsBcp+H",
	"NZBzJsIb0MesV1EsfZv1TsBBu1jcsboo6EKEXYpkD25BL/4F97rQWrRCjFy/HTPSgWEI2lDyrG9bCN6I",
	"XBRzeIV1kb1wtW9bK/DGpSDEF4O2658FnncNOJvFwZ2gJenftm4eC0DXPRY/bkP/GLyJETiGQZu8dB1Y",
	"i9b+h7f3//n1cPfecPD1cPCyZVtb1EziflLi+nlSyYAcfcsAY4g6QYjPIggwjEIokZHvOps+6IxJ6nDw",
	"6nAwGO7eHQ5uE2r/KqfW7rj+4yftDrj5+COPECF3QRhuB6g17ri/G+5+MRzc1YmIDPoYGfTRU2TQWAST",
	"MPtePNzuf4aDr/dev23GaU5JKQV2JnlOGJz6Vt22H3VnGF+rOECgDZd7664Hi/Qln44j5zeGu+8Md/8x",
	"HHykEjK4+fiJhVOPnf7powsLRLVueCm65rkON+S1IPAg8I3G3Hvx4+//8Kowmh95XtzzJIDJGNEAJobK",
	"6dNFgTNwEEFyDHIqeC5Am5dBuyh8wZGOh5GP7//xt0poTCSV3f8Ndz9RykMpB56nnAzin6IQ6FxFfnUx",
	"7ITSmYB9ABACPSPyv/vm7f1bL4q0t9wtaEeRS0VTvfBjSEybL7XVidyNr/jvvnl77/cv6BRvW8kL02SM",
	"4E3NUjna7BRKiegZoQkMI/zkFvTpP0utFRhCtEWClqXWMpS57k6HhU3jmM+94eCd4eDecPCSyFTmSGwr",
	"Qt543a+tXFT1WpgPKBd0sEwUl0Av/pz9t9SS8L8BnU3YGtNVDwcvDHffp2EHRWSAx0Tk3u6f9m8NJKwx",
	"AlnfGW9rIUQyjbpO4K+NK/Lh7t9is4v1eq8gfiGuOGHzOg6djSDwLiAgBAKuj2EbIjP+77y398VnpQP+",
	"jA63ESC85GMUtCJnfOf24C93hi/8av/XH+59/umDz7747qtXjRmuK3w7oZ6Tufgt0bmoCJmc8vg554ZO",
	"gFqzGtslZOZ1nYP8xEhQYoBGXjkSXZ1EmbMpUokR8MN1iJ4eGzb3f3N3/9sYMA++/WA8zAg0FChH7hbA",
	"EpcCWi3Ech/jTLWv3X/5lrFhrbsoxOOLaO/123sv3x59tF8AH0wy4o+Hux8NB6/8xHhkN1wGwqpklHnn",
	"/q339156V7pE8MCk4rvzpjETyWCTSe/OmyNLrwsQ9PGZSXD54PNX7t969/tbf3/w73f2XnxpRJhSAs5C",
	"z+tuBD58OupcoymNiQm5//qXe/+9+/1bX+1/8OmDNz7ce+1zBVFkYJ8OnJH0VNCB0yZp760v9/71ZzVJ",
	"ckrGR2FeIp+8Zj5J2tbE3I8s+3yiLjHBnIHwzi3velKHINJvp75XkKoKf3nDyDw8W55fBm1ZFHxY1uhR",
	"ukSPf2SSOFqoHy3U61iohxcgXaMXIQi3kr2wlCHdngXX1zPXrkOHdZvnOk8yGyVHDUsbSJYBwIN+C6Bn",
	"XbgtCVrKENy36YBLLekzOT4IxSR/cU0aKWXPsXQFzz13A38siTJ5UMFyyRQz8S6RZbsMG4I4BTYFnnIM",
	"yJVVJE6ivS5wXNyTrM0NNLfu+m64cQ5guY7WEYRntQPUod7zeiIRnwgra7GKAcLKrkLN0xwKxFEVWMj6",
	"E0RtiIrzkjdEHuxM/TllyfG0khfVNLGk8wJHODPGGU1ATeLSBC1TF7IWUjEaOjYjcKsxXAb7ScGdiMgA",
	"5Bz75glyHd6kKW+mtCVHYRrkYavcqbB2XG+p7GV5cGl0MB/zeyVzbia1CyiIukVRteOPRzU90hfVAO22",
	"zM7YKDlqyD8jr+D6Nu1OoZ3rgeurVRA/VflFtQGEEJ0NIsFuOEc9jvPi+R/BXyWMK0CREcrJIWW66EMU",
	"VBRrWXSSqc4F5AjlASfH8YxAokxpejVlXJNCqCKrcn+cF6rgMpVp/C59MCp8WX9UI0nnZeBNxyrQJfYz",
	"wramcpOS5O24fVJJPBK1oI9VmbWYF+0Oxwj4zgixM6yL4+dGE7ZHOTlptn7nUwzS/eJYILSIayq2sYoB",
	"jsJiV2H6eclMzRryPZICrvOuB6VrDlI12DojD8PgTQz9UL16TfosPNIUavVta3PVfR6OGPd1Wxo6tVGh",
	"ARwYJxwWmHeklPKC4HizOenxFNoFpZbW0I3q84QuqceKNVzq9uhYCtK4fuYVJweCh0zcl4PAk0SYtFJg",
	"zcRdcG2zbuWB0jihYNzTCCFgPoZTVc4AB7tb8KLbceV6SbhSqcdW196UlsiYFbUYTT+Rmj511Yo2wmSw",
	"ys88qqoTUU4yxmxB1nnNsJqUqUxVk5ePGBR/ZAMpA7INN8QBcuE4UE+7pZh/inTVK4V9NqSCSrG70WLI",
	"8hhH6+J6ECCDdQBppglxZN5r3FoWfe1Jea2IrqZDW5dRWkdRXu9gXpBgXidQso9fttE+e5vieY7lm+WS",
	"+cW8xNLYi1fmozmfrKj9SxjMprGjWXD2ZkH6Wg3zlvLcRmFXvXyyYn1R04k7LZuichvihffN02o4KWzR",
	"C4E2KyTLJqiO0YX54xAlK1xJSJSfLdkO0OY4mop/qKhJv2W6osMUCeK6MKqmGYc4+tsZ0luRUL0GpjW6",
	"FM82EYuJklm7VMtZdYjECDTcjzQZVT7NlJNdtxmPWtxlDgjaaxkUy4spRs+jyChQwLEKS+CHledvxjeD",
	"EUumNLqYdcMoSPFgrEJjlZoMmJlA0oQUT4HB+fTr27i887gR16XZkfLRlJknu+zc80h0cxdI5LLm2YOy",
	"tDlreZWcgYJOhFzcW41tll2XAQGCKLaH+K9r5K/zAeoAbC1aP3/ussVuKiBjkKdWaskbGHdpYaPrrweE",
	"GBfHKLXOuW3XCVCM7i2IaP7UOnn8xPGFGBlBF/qg65KPFo6fJKsqvEHIacKk1qANcSGQsi5A3CAtGp4b",
	"Yot0hdLKGSstkCTrNNCBmCQKr8Rxr7Vo3Ygg6iVQW7SC9fUQ4oRBIM0tXLXF20UeWViY2s0RfEWn5kqP",
	"tshz37ZOLZxU9Z0S2xQuuyAvnSp/Kb2so29bpymr+hdyd4zwICNy5+F15WosTjqpsMoLCkuq9OYOK8bo",
	"l6tfqfkn03oOGQBimGX658uSEoPBKIISQKR2WhMeEjZMYHEYENHcESrHDBDS4F4oQ8tKriqtGujY0p7y",
	"FXGzCkVRRkbuCom1z4cNo00aQrSgBzEsIvUc+bzR6RnglbbVHdI/Au1EoG1plDFv0LWtbiTxnDQkNsNj",
	"yY0RDxUYyVVxTwSt3hRxWHalhgSJy3K5i8z0Z9N6HA105tHxt5PiSGUIQloo1yi0uHJqaxRb/moIac38",
	"QS5uWN2yPlrghDUvaKEI4dDS3GH1qX0D3LitH4WNLgrY1Vly/FxI613LnW1WGztLM7XAhhFGBMHMI1a8",
	"pBZZiRDSokHv2SkAg5YyV644OoxEYxdT4rIztldIhpbnr+nw2bEglHD6LETueq9B3iwEH4XkYHXTeGEo",
	"xT2fDddfJ0mzA5i1jYhMbCmkFb0ToFqi1U6aV23SUOCXaWZVqt0k1ExfawDHYZX6RV3ns7akvqJSlUvz",
	"xLKYTcZA7bo3pTaBAA7SgK1IP/GPBsDgblke1w9X7FYz5hhKu1mdndK7sjbKyC2p1TOK3Vgl2oEGYOmp",
	"Ef30KvD9EE+sVoJjAQqJ5gUcNHfSoxL6mCy2p0RAGkxc4g5elEdk/DGNWYrJCszoln0b0NkUxfNQu48y",
	"8KgSJ0UxSPIldaOkqrSGCUCkEqk7k3GEZL0bDNOzXUrPR5uoFhvscFjlimTjyNSX0aeITCkHU1hw5Lb1",
	"Kw0/c2PN6JKjnMpK1xzZuUEpfOnLDdqK2rcUw7SX6jFMx5Gp0vMa9IszwsYzCXnAG19aTDrk9Fuzk57M",
	"Uxp53EAZ74oH/GoQEz+cRFoZsfOS/WGaouGF1DXFxtaQpgKLX2NQrV8q085a1wtAq8FRUueEL54HloUl",
	"dNWbJA9rUyxvkDu03q1fapIaazyflMyVB5Bpdd0srTFKFZXKYP6MPMYCZmdllfqPG6iiLnLQtnIVkVEk",
	"mrmcUDYC84RdynmSFtSvtVWTEUv8zf+u2VpJBq8tSGpejISAI8MJK59RQqXT022RsfPatahKvqHPK4uj",
	"dc60pciJrJFDtjodZd9GUWW2Qq2eZZ60ukOVctREBQHOT2a+aOjNVnZ8X2nwrI1+B1S8DaAmRSbDSfR5",
	"rkD0VAQlZjQidUIjEZo8saH6Ro/qTTI/4gwmOYzsdPLcxvhYyJ/l1U2VrniIWGE3uaPGtUhXGLN8HhUY",
	"OWyTqVaL8i++qd6UyxS4XKD7YMzYFGiRXNxzPf+a7I3HsYh6F1S8y6YmlRrubnOUH7rwW70jWdRYtX5C",
	"o6zl3gFuFBpDKSpIdb59QnYdkn4RTpqVL8aT65XqUigbzmRpLnJwtETP+whOcxX7CLXSZmDBbgApft0u",
	"QdW8+goEfbgNPOVqdIU+b9DLixoeub1IiTfW2pqxPMxh0ecOvaTCoCqu7KACd2eYyW5VejnGLO1WcTyY",
	"pOTn8oiCCiFTT0FIrjCbA+AcpTgECG0HaLOJ6W0y6j1Q0FZuBCb3zz1Et3wkJEu0n3I6L6qO9VtWz4KJ",
	"+orlLJlqKyxk0SiD1YjglIQ6o0zhSkE9cbVpkTfY5g65LqpvcK2BTL/0kcCkiXNPrqia2LeXxGke8DeT",
	"C5dqNBKdB9Q4vwOQX41IT/ifP5eoWYpLfWJUm8KrWtmX6VrgftZcLkdc/S53m12QqnQRcQNtlESuWK26",
	"ZIqa3pK0bKpmn0JvpS2qMRPUYQqytqn25VEWg0bFYZZKISyU2c6IqNvquUtfS+g7GMNv7tB7T02iLami",
	"s3CLY9Vk/kjvWz1sEZdUjEW41CvDWmGfSuFQBV5yPxnVqfcqgy+9ykUZHHli6omzQ2c7krI06GPGdCMk",
	"Z7fEYMiKI6WclEOICm3pTQ2FtuT6rULj5K7PHVlJfr4xqbkvtmUnLwrNk/MJxTdivRSaM10UXCi5oyff",
	"uM2+urYQobArB/Lt0731q/3/BwAA//8A3nDf6JsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
