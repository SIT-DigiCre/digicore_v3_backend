// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
