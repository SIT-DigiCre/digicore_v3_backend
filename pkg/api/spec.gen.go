// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/cxrX/KgveCyQBaK8c27m5AvKHY8eOGisxJCv5wzACijta0eKS6+FQsiIs4Ghr",
	"NInrJkWRpm0CtGmbpHm4TuA0aZ79MBvZzrcoODMkZzgPzj5IrVf6Q7a0HM6cx++cOXPmzOyO5YadbhiA",
	"AEXW/I4FQdQNgwjgP552WkvgagwilPzlhgECAf7V6XZ9z3WQFwbNK1EYJJ9F7jroOMlv/wvBmjVv/U8z",
	"77pJnkbNZyAModXr9WyrBSIXet2kE2veetHxvRbusQGSNnYDIPeo1bOtp30n2FiOXRdE0cToSPuTUEIf",
	"NVJRJDQsBAjAwPGXAdwEsHppLG9HCHSKkng+RGfDOGhVP/4SiMIYuqDRCkHUCELUANe8COWkrAROjNZD",
	"6L0CaiDnVIzWQYBor7xYejbtHYODdDG/Y3Vh2AUQeQTJPtgEfvIL2u4Ca96KEPSCdsJIB0SR0waSZz3b",
	"guBq7MGEw0u0i/yFyz3bWgJXL4QROh+2veC04/urjrshDu6GLUn/tnXtSOh0vSPJ4zYIjoBrCDpHkNPG",
	"L11xrHnrwSe3Hvzj+8Hu3UH/+0H/dcu2NomZJP1kxPWKpOIBGfoWHYQA7IQROg2Bg0AcAYmMAs/dCJzO",
	"iKQO+jcH/f5g986gfwtT+xc5tXbHC546bneca089/jgWcteJoq0QtkYd97eD3W8G/Ts6EeFBn8SDPnEC",
	"D5qIYBxmP0yG2/1q0P9+761bZpwWlJRRYOeSZ4TBqG/Zawdxd4rxtYxC6LTB4vaa5wORvvTTUeT89mD3",
	"/cHu3wf9T1VCdq49dWzuxJMn/++JuTmsWi+6EK/6nssMuRqGPnACozH3bnz28+9vcqMFse8nPY8DmJwR",
	"DWASqJw8KQqcggMLkmGQUcFLIdy46LRF4XOOdDSMfHbvD79RQmMsqez+Z7D7uVIeSjmwPBVkkPyIQiBz",
	"Ff7VQ6ATSWcC+oEDobNtRP5PP7z34PoNnvaWtwnsOPaIaKoXfgKJSfOltjqeu9EV/9MP7+397lWd4m0r",
	"fWGSjGG8qVkqR5udQSkVPSU0hWGMntkEAflnobUEIgA3cdCy0FoEMtfd6dCwaRTzuTvovz/o3x30X+OZ",
	"yh2JbcXQH637laXzql6F+YBwQQbLRXHB2U4+p/8ttCT8rwN3A7RGdNWD/quD3Y9I2EEQGaIREbm3+8cH",
	"1/sS1iiBtO+ct2XkoDg67cerS2HYkUScIZmqR2LrNuHp/htf3btxUyQK952TshIBKAOX54bByqjaH+z+",
	"NfEACcTuCkjgQpxjNgu3yF0PQ/8cdLiYxAsQaANoporbH+5982XpgP9PhlsPIVoIEAxbsTu6n73/59uD",
	"V3/54Fef7H39xf0vv/npu5vGDNcVSR5ThwdMKJnqnFeETE5F/JzxIjeErWkNM1Myi7ouQH5sJCgxQILA",
	"AomeTqLU74lUIugE0RqAz48Mm3u/vvPgxwQw93/8eDTMcDQIlENv00ESl+K0WpCmYUaZ9d+89/p1Y8Na",
	"82CERhfR3lu39l6/NfxozzmBM86Ijw52Px3033jMeGQvWnS4BdIwc8W96x/tvfaBdLXiO+OK7/Y7xkyk",
	"g40nvdvvDC29rgNBgE6Ng8v7X79x7/oHP1//2/1/vb9347UhYUoIOA18v7seBuD5uLNKsitjE3LvrW/3",
	"/n3n53e/e/DxF/ff/mTvza8VROGBAzJwTtKzYQdMmqS9d7/d++ef1CTJKRkdhUWJfP6m+SRpW2NzP7Ts",
	"i4FaaoIFA2GdW9H1ZA6Bp9/OfC8nVRX+ioaRe3iaKbjotGUB+UFJF8RZtiD5kUniMGdwmDOoI2cQnQMk",
	"XSBCEGym23IZQ7rtE6avF1avAJd2W+S6SDIdpUANzWBIlgGOD4KWA1/0wJYkaClDcM8mAy60pM/k+MAU",
	"41TKqjRSyp8jaTKBee6FwUgSpfIggmXyOmbiXcAZBBk2OHFybHI8FRiQK0skTqK9ruN6aFuyNjfQ3JoX",
	"eNH6GQfJdbQGATitHaAO9Z7VEwnZnFxZi2XkQKTsKtI8LaCAH1WBhbw/TtSGqDgreYPnwc7VX1CWHE9L",
	"RVFNEks6L3CIM2OckQTUOC6N0zJxISsREaOhYzMCtxrDZbAfF9ypiAxAzrBvnqvX4U2afadKW3AVpoEf",
	"tsqdCm3H9JbJXpaSl0YHszG/VzLn5lI7B8O4K4qqnXw8rOnhvogGSLdldkZHKVCD/xl6BdezSXcK7VwJ",
	"vUCtguSpyi+qDSAC8HQYc3bDOOpRnBfL/xD+KmVcAYqcUEYOGdOiD1FQIZbV6CRTnQsoEMoCTo7jKYFE",
	"mdL0asq5xjVZIqtyf1wUKucylWn8LnkwLHxpf0Qjaedl4M3GEuji+xlih1W5X4rzdsyWrSQeiVsgQKrM",
	"WsKLdodjCHznhNg51vnxC6NxO7WMnDS70LMpBunWdSIQUk82Edsgu+BiV1H2eclMTRsWexx6X12zRU56",
	"xRVqZz0fSFcyuCyydUoe3IFrCASRek2c9ik80lSi9WxrY9l7BQwZTXZbGjq1saYByCgnDMKozyWUsoJg",
	"eLMZ6bEU2gJUSosEh/WkXJfEDyYaLnWmZCwFaUw/s4qTfcFDLu6LYehL4lZSf7Bi4oSYtnm38vBrlAAz",
	"6WmIwLIYGarqcRwXeZvgvNfx5HpJuVKpx1ZX9JQW3piVyhhNarGaPnUtjDZupbAqzmeqWhZeTjLGbE7W",
	"Rc3QSpeJTIDjF6UYlJTkAynDvHUvQiH0wChQz7olmH8Wd7VdCvt8SAWVfHfDRablkZPWxW0DBxqsLnAz",
	"TeAk816jVsjoK1rKK1B0lSLaao/S6ozyKgrzMgfz6oOS6oCy7fvp22ovcizfgpfML+aFm8ZevDIfzfhk",
	"RUVhymA+jR3OgtM3C5LXapi3lAdThL368smK9kVMJ+m0bIoqbLML75sn61BaLqMXAmkmpODGqLnRhfmj",
	"ECUrh0lJlB+e2QrhxiiaSn6IqHG/Zboiw4gEMV0Y1eiMQhz57RTuTSRUr4FJjS7Fs43FYqJk2i7Tcl5z",
	"IjECDfdDTUaVTzPlZNdtxsOWjJkDgvRaBsXyEo3h8ygyChRwrMIS2GHl+ZvRzWDIQiyNLqbdMAQp7o9V",
	"aKxSkwEzE0iWkGIpMDiAf2ULlXeeNGK6NDszP5wyi2SXHeweim7mhoxCLj5/UJaMpy0v45NVwI2hh7aX",
	"E5ul94EABwKY2EPy1yr+62wIOw6y5q1fvHTRolcx4DHwUyuz5HWEuqRc0gvWQkyMhxKUWme8tueGMEH3",
	"JoAkf2odP3rs6FyCjLALAqfr4Y/mjh7Hqyq0jslpgrSCoQ2QEEhZ5wBq4BYN34uQhbuCWT2OlZVd4nWa",
	"0wEIJwovJXGvNW9djQHcTqE2b4VraxFAKYOONLdw2eavT3l8bm5iV2OwdaKaO0vaPM892zoxd1zVd0Zs",
	"k7vNA790ovyl7DaSnm2dJKzqXyhcosKCDMudhdely4k4yaRC6zkILInSmzu0xKNXrn6l5p/JqkRkAEhg",
	"luufLXZKDQbBGEgAkdlpTXhI2TCBxUFARHOHq0czQEiDeaEMLUuFWrdqoGNLeyrW2U0rFHkZGbkryFdU",
	"HzSMNkkI0QI+QEBE6hn8eaOzbYBX0lZ3C8EhaMcCbUujjFmDrm11Y4nnJCGxGR5LrsR4qMCI78J7Omxt",
	"TxCHZXeGSJC4KJc7z0xvOq3H1UBnFh1/Oy25VIYguIVyjUJKNie2RrHlr0aAVOLv5+KGVkProwVGWLOC",
	"FoIQBi3NHVr12jPAjdd6JGp0YUjvBpPj51xWRVvubPOK22maqTk2jDDCCWYWseKnFc5KhOAWDXJ7jwAM",
	"UiBdueLIMBKNnc+Iy0/uXsIZWpa/pstmx8JIwumLAHpr2w38phB8CMnB6qZxYSjFRaYNL1jDSbN9mLWN",
	"iExtKSJ1wmOgWqLVTpZXbZJQ4OUssyrVbhpqZq81HNel9f+irotZW1xfUanKpXliWcwmY6B23ZtSm0IA",
	"hVnAJtKP/aMBMJhrpEf1wxW71Zw5itJuXmen9K60jTJyS2v1jGI3Wom2rwFYdhZFP71yfD/EE6uV4piD",
	"Qqp5DgfNnewAhj4mS+wpFZAGExeY4xzlERl7+GOaYjKBGd2ybx24G7x4Hmr3UQYeVeJEFIMkX1I3SqpK",
	"a5gARCqRujMZh0jWu8EoOzGm9HykiWqxQY+cVa5IOo5MfTl9isiUcDCBBUdhW7/S8LMw1pQuOcqprHTN",
	"kZ9GlMKXvNwgrYh9SzFMeqkew2QcmSp9v0G+GSRqvJCS5/iTkFZ2DjOXV9P149WXIT2FqTT8pFUjaUUF",
	"qBZddqizJhFm45UEtEUOGl2n/RCkjATVKWKOFXyIpVxP4qXWVcYG5SqSEGzkuPheXnjuYZieFWaIj6U2",
	"O9mRWaURJg2UC1H+5G0NxscOJ1FsTuyspGWppogNSmOGZBZsSHP04heoVBswlGlnpeuHTqvBUFJnJM4f",
	"1JetF0g6Ks3q16ZY1iB3SCFqr9QkNdZ4Nq1lLV/ZZWWv07T4L1VUJoPZM/IEC4geYlfqP2mgWg7hE/CV",
	"qwiPItHMxZSyIZjH7BLO03y9PgmmmoxoRn72t7NXSlLrbU5Ss2IkGBw5TmhdmxIqnW3d3jW9SKEWVckr",
	"bVhlMbTOmLb0CweNjvIvn6lyqaBWzyJLWt2hSjlqYkGAs7NlJhp6s5Xfq6E0eNpGX5rAX9NRkyLT4ST6",
	"PCMQPRFB8anGWJ1pTIUmzziqvsCnepMsjjiF2UcjOx0/6Tg6FoqH7HVTpcef7lfYTeEOgFqky41ZPo9y",
	"jBy0yVSrRfn3XFVvymUKXBTo3h8zNgVaLBf3TM+/JkUrSSyiLk/gL5mqSaWGZScM5Qcu/FaXCogaq9ZP",
	"aJS1uL2PO/jGUIoFqc62T8jvKdMvwnGz8sV4eu9ZXQqlw5kszXkODpfoRR/BaK5iH6FW2hQs2A0gxa7b",
	"JaiaVV8BQQC2HF+5Gl0izxvkVrGGj68VU+KNtramLA9zUPS5Q26PMShXLTtBxFzmZ7Jbld1aM027VQwP",
	"Jin5mTw7pELIxFMQkrsFZwA4hykODkJbIdxoInLNk3oP1GkrNwLTiyEfout3UpIl2s84nRVVJ/otq2dB",
	"WH1iOUuu2goLWTTKoDUiKCOhziiTu+tTT1xtWmQNtrmD73HrGdw3ItMvecQxaeLc07vjxvbtJXGa7wQb",
	"6U1oNRqJzgNqnN8+yK9GpKf8z55L1CzFpT4xrk3hVa3sy3TNcT9tLpchrn6Xu0VvLla6iKSBNkrCdx9X",
	"XTJFTG9BWjZVs08h10WLaswFdZCCrC2ifXmURaFRcZilUggNZbZyIuq2euY25hL69sfwmzvkQmKTaEuq",
	"6DzcYlg1mT+yi5APWsQlFaMIl3plWCvsMykcqMBL7ifjOvVeZfClVzkvg0NPTDxxfrBqR1KWBgJEmW5E",
	"+FAlHwxZSaRUkHIEoNCWXKEitMX34gmN00t4d2Ql+cXGuOZebEtPXgjN0/MJ4huJXoTmVBeCC8WXZxUb",
	"t+k3VQsRCr0LhLRvPBoA0Go8Qk+UP9LoAtjxosgLg8eEiwokvdHjlyJj5EDs5d5/AwAA//+tEbMurqAA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
