// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
