// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
