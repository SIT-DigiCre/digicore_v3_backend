// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"csoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
