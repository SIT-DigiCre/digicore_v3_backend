// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hIpJG8EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
