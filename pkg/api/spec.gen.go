// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+LBLJYBY8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
