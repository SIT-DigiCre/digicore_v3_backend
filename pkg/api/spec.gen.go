// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
