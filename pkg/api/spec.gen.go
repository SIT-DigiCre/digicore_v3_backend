// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
