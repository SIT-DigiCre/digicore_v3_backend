// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd627cxvV/lQX/f6AtQHvl2E5TAfngmxK3VmJYVvIhMIoROVrR4nLWw6FkRVjAkRrE",
	"SeomRZGkaAK0aZO0ubhOkLRprn2YjWTnLQrO8DbDmSGXu+Sud/VBhqUdzrn9zuGZM2dmdw0LdXvIgx7x",
	"jcVdA0O/hzwf0l/OAvsKvBFAn4S/Wcgj0KP/Bb2e61iAOMhrX/eRF/7NtzZgF4T/+38M141F4//a6dRt",
	"9qnfvoAxwka/3zcNG/oWdnrhJMai8QxwHZvO2ILhGLMFiXXc6JvGWRd4myuBZUHfHxsf8XwSTqKPWrEq",
	"Qh4uegRiD7grEG9BXL82VnZ8AruiJp5CZAkFnl0//SvQRwG2YMtG0G95iLTgTccnKSurHgjIBsLO87AB",
	"ds4EZAN6JJqVV0vfjGan4GBTLO4aPYx6EBOHIdmFW9AN/0N2etBYNHyCHa8TCtKFvg86UPJZ3zQwvBE4",
	"OJTwuWiK9IFrfdO4Am9cRj4566JO+JOnm1ELP7tp3DyGQM85ZiEbdqB3DN4kGBwjoEOfuw6MRePwnU8O",
	"33zJMI0t5hvh4wlHIXvrjsvIOAR2fal40R8AxmCnFNHB/huDvXcHe+8N9j/mSdvOFjSDwGG044fGSXrv",
	"v4O9T7VEHeLCasqkk7832L+dkyujUsHkjJyZWDHWeCS9gICrQAIADsdV+H7w0SeHf/ydBgQe6I6ikk8P",
	"Xr9TVh+UFO+bGR1cQh3HOwdcdw1YmzJXsGFVFdx58I9vB3ufD/a/Hey/XJZbSjDD3zIgBOIu8sk5DAGB",
	"gQ8lkcJzrM0RVLr/6mB/f7B3b7B/h3L7Fzm3ZtfxHj9pdsHNxx95hJqxB3x/G2G7Kt3fD/a+Guzf06mI",
	"En2MEn30FCUaqmAUYT8Iye39e7D/rRJFoqSCkRIOzFTzGWVkzLfidLygN8X4WiEIgw5c3gmDRJ6/+K9V",
	"9KwKyamSwc3HTyyceuz0zx9dWKCmdfzLwZrrWBmSawi5EHilaB68+MmPb77KUfMC1x0x4GQE0QAmhMrp",
	"08rwQxWZETBjgmcR3pz3MBzqIPzJK4FlbON+a//w3TsPbr2oe2vXr/xJJkLVDf/Dd+8c/OEFneEnkmYV",
	"o81MoKTIiIIkJQ5/LtpHifFcJsZBnBdfBVIQzEtUDsiFLeixfy7aV6AP8RZdyV60l6HMN7rdyr5B05h3",
	"B/ufD/Zv86yn71XTCLBbbfrVK5dUs+bSIyYFI5aqYtWHWCa1YyFvtSpbg72/hiAOZf88xyKXip4ws3rw",
	"rQ2E3Ccw4HJHxyOwA3G5ROnuBwdffVFI8BeM3AbC5KJHMLIDqzrs7//57uCF3zx46aODLz+7/8VXP3zz",
	"ammBm8r4T6jTuEzKH9ucN4RMTyJ+zju+hbA9rcuBmE3R1gLkR0aCEgMsWe8L7FwGO3Fk4TkhGHj+OsRP",
	"VYbG4W/vPfg+BMX97z+shguOB1GRl7GzRafLJbW2jaPCcJUM7LXDl2+Vdp51B/ukuooOXr9z8PKd4an9",
	"CnhgFIo/Hex9PNh/5WelKTv+MuDSiWFWjoe3/n5w+33pytEFo6rv7lulhYiJjaa9u28Nrb0ewNAjZ0bB",
	"5f0vXzm89f6Pt/52/1/vHrx4e0iYMgbOQdftbSAPPhV011ila2RGDl//+uA/9358+5sHH352/42PDl77",
	"UsEUJewxwilLT6IuHDdLB29/ffDPP6lZknNSHYWiRj59rfyL0DRGln5o3Yu7GLELCg6SDW5i6EkCAs+/",
	"mcReTqsq/ImOkUb4qGoz94uEuHIT/sg0cVS/OarfNFG/8Z+Ami3NNRcJIum2dPnZnl67Di36W05ykW1G",
	"Js+QqqDEJBqOHTYXY+oMe75vUsoXbamtlFWr8DO6qWSfkX+aR3g1Nq8CieokMKs2+5LjQun08vJSuJ7s",
	"hQiUCi0x6EXbMCXFo8h2AhizKo0Jhf9XYYKzY/nyQrQoVlhcvV6WLWupfJL1rZ7lJel+kYIqVY6UWXE5",
	"BZi6vXQ5pQOVdL9KoZRyCokmUHKQCQZj8eZ0viE8egTHEempXFPhO0XukTiFIjIrxJ124Mu01iT2pfQq",
	"ouAq0Jk+z5Of52ViSqiSbatdvxpTskQ4ZJEWyvO8wa24SzGxk1DzAy70bICfceC2pHpRlMr2TUZiuKgX",
	"ykcL+mvSkkn6OYG27HNBQTEHpjxx40TkSHN0rhWhMdKloPMLqfgzoNn0cwd5w/p3Vh/MSTP7NkYp9Y5s",
	"RUEAubHyzEms1wOWQ3YkWxwlLLfueI6/cT6qvuY/xhCe0xJowrxLeiZxds+taMQKAZgop/I1nwoo4Kkq",
	"sJDOx6m6JCqWJE/wMpip+QVjyfF0RVTVOLGkiwJHOCuNM5ZrjRLSOCuzELLqMzWWDGylwK3GcBHsRwV3",
	"rKISIM+IX34vXoe3QJduWwrXUObiunSbzpboXrblHkpOO3PzssnZFMlxM7EmzPFMRQAJJEmcn/y9IFOK",
	"BmZnpA2YS8nCVTCltkADbxLo+ep3oHIxrGm07JvG5orzPBwSPUmlY2hs2UOsyhMcReBhnGYVkZFNVYsx",
	"c0Yt7IEdNmpxU+rKVBJBfRVrusLLjOBkInhI1X0VIVeyvGRtG6tlwkVmbDqtPEpXeRuGMw3x4hPfJqo2",
	"JmARZwtecrqO3C6xVOrKi65go+9XKtdhRHOLwIYeUW1E1lkZ4kmrW4B4PckEMzldi5aJGoTG8qoavZdH",
	"nN/J9zalhJRdOhuOTxB2YBWoJ9MyzD9Jp9ophH1KUsElP10+mG5Aa1OVV+u7jgpD3A4EWOYFggh0mEDM",
	"TBiTR6+qTUf6JqHiph5d8422gaaw4aW4MaV850j5ho6Chouijojp614QJZZ3NUjeL0PV5ctF8dqr9+pG",
	"zFjA9DV29Bacvrcge6yB95by3FWFjZVorsobK7nnm9pYGaGNqamNFfXZsG2EN6tYKvxhqqbzFtmKkckz",
	"lJmiVNtTFebEXWFxo1ZngXFRV+wRbycdX3ojR+MSK6dtPBIn0Eg/rZvEOrU16cbDduGVBwSbtQiKxVsy",
	"w9dRZBwo4FiHJ2TJqtqMqrrBkL1tGltMu2PktDgZr2i8bajE/RLXt0s0oYWDMlOWuxJiOGOKbBfdWzAU",
	"35lrkISqefpBUdk8GnmNHkiDVoAdsrMS+mx06RMEGOLQH2i3J/1tCeEuIMai8ctnrxrRfTuUBv3USDx5",
	"g5Ae60B1vHVEmWHdT8Z5p+NYCIfo3oKY1U+Nk8dPHF8IkYF60AM9h/5p4fhJuqoiG5Sd9pqLOvSf8LcO",
	"JLlkyngCklY4oOU6PjHobDjZgjOyzax0tQa6kNBy4XNh9mssGjcCiHdiwC0aaH3dhyQWE8grDPJHWehh",
	"mbr4cGLZayZ/y9YjCwtju0FJaN6VXKWUKqpvGqcWTqpmTFhsc1c90YdOFT+UXFXVN43TTED9A8INW2nv",
	"NGuNo+jvIV9i/tDJqP1zpufuZmJeAH1yFtk7Y1Q4fwOUROMstMQcpq5IcAD7jWEh6psu4G8Ea8WhhPpV",
	"Nog8dy2EvGDMvpnx7PYu637sM+O6kNXceDbP07/LDc0+E0SVO3sYWFKHTbouebNUcF+9vrg77BpTsqmP",
	"l7pQOREdNgr7RAsPYRwMJFZdpWVsRSAMmjRsPVE2KGFTXgdHoZYPtQTocygC9ClUmO+PLYNqJgTQBW7e",
	"DomkM5UDEaBOgZjtas6AFNqOUE/ApJwyqcrqmZuIR7Z36Yq7TOojs2+a+SRClgnt8Sp/3tIemQpFkDSq",
	"vwaRHss/W/mONOgFjVm0zlxHZ0xO+mmLqRnmGo2pMD43pPR/OkKZ5LBzRw9RisMY1txh3uFlnnrXL2lz",
	"ZuiM0du7UWN6v9j8SstfSHrbi8NFtg9+el4BnBhlYDEPiGjvckcVSiCklXmgCC1XhGMQ9UDHlM4kHsGY",
	"VijyOioVrjB/2G7eMNruwhILgu5OCbyysboLKI9AOxJobY0xZg26ilw8WkSXwmPBbagPFRjryv51CpIg",
	"cVmu96aXBZW8x9JAZxYDvxufxVOmIHREi91im0s92FG+2k3JyEjMdilhLrtSD9Wfla9tZdsdpBXLZyB2",
	"1nda9ElZ0ZLv9qi1dMmTUnz9UMvx1mkXxAR8qxSTsUP57IjmGOovGat2k0aZNnPYXyetMlLrxi+E5LEW",
	"sCwUSBZfsjYc2jBfq8mljT+yyCoToHHbl+U2hgBBSVjN80/jY5nabfrlb1XjcM1hNRUuQqmfnE5WBlc2",
	"RBVdo+PNtYfXiI7MhCl/CldkEowhwgqNabX6m0BrSmNsMZe1Btn05LsUvuzhFhvVoufXpBhms9SPYUZH",
	"ZkrXbbEvMPRbT8fsAbe6tiLt0PPb7W5ytlzp5OEAZZGXP6LegJqy5CTaSpmdlXQ3slTRdnWkf0lgylmo",
	"vrhUZJ3VnouA3cpw0uSKir/RQr17vR411Ddm2KxD7rKO7X6hS2q8cSlu+i5e/Cf94dNUOCo0VKKD2XPy",
	"EAskuu1BvfGOkKvKuuhVEbWbiFKRWOZqzNkQwlNxmeTxOkgpeThA+TKKVjr1dqX7ENqT3qlcLViydDhN",
	"zYqTUHCkOImq+kqodHdaPYxUoTK6caQRU8nrjFljZXidMWvp+000Nkq/3KrO2rDaPMtZ1ppOVYpRE+QU",
	"ODuliLyjt+30Ahqlw0dj9CVf/j6bhgwZk5PY83yO6bEoiq9oBOqCRqw0eWFD9QVh9bukSHEKixyl/HT0",
	"2kZ1LIi3UehelQ5/DYbCb4TLMhrRLkez+D3KCTJvL1OtFeXfo1e/KxcZcDnH92TcuCzQArm6Z/r920tv",
	"UdMm3NEwZQC5nAxoxKQxuRLpdzxy3tJvhcVy33JZf5zQGGs5y+g4osPwACqRiGchNLOBIL3FT7/ypsOK",
	"V+DxrYBNBYSIXJn1OC/B0bpcDAwZy9UcGNRGm4JVeglIZRfrElTNZKzYZXfx9IvLuY79E78oUCR39hVv",
	"aSR3AE3TlkZGhjJ1W04ls1q/jREy9nWq5KbGGQDO0TqYg9A2wpsjHcKPr9l8iE6oxSw/1IfwS5o6tG/V",
	"M/qpaWvsdtAYY6Jn9LmbUyd9Rj+yYtZhx3JGnxNyfs/oJ04y7Bn9yemvQaQ/NGf0hw6Jwx/hb8rgda0E",
	"i2w90SP8QzDXfMjdju6BVoaIcIA2S6I3Sc/JbY+JvBIzpoqapyRrm1lfnmVF0Kg5zVIZJEpltlMmmvb6",
	"zN3WBfxNxvHbu+x65zLZltTQabqVEbXM+yO5VnreMi6pGvNwaVaHjcI+0cJcJV7yOBk0afc6ky+9yXkd",
	"HEViFonTk0m7kt4l6JFI6JZPD/jwyZARZkqCln2Ic2PZ+cXcWHp0PDc4vqdmV9a3LQ6mjdn5sVF7fm54",
	"3MSefyK0S254ZAtx7FkXdXJj2R2f1/r/CwAA//+ILiN6YacAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
