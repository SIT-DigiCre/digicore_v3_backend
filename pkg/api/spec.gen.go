// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NvxvAAAA///Y2KULSoYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
