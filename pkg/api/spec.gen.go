// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdeY/cthX/KgO1QFtA9qxjO00XyB+Oj2RbOzF2vckfhlFwJe4MvRpxTFG7ngwGcHYa",
	"NEfdpCjSFE2ANm2TNofrBE6b5uyHmYztfItCpA5SIiXNIe1kdv+wMTOi+K7fe3zkI7l9w8KdLnahSz1j",
	"tW8Q6HWx60H25Qlgr8MbPvRo8M3CLoUu+wi6XQdZgCLsNq972A1+86w27IDg0w8J3DZWjR80k66b/KnX",
	"PE8IJsZgMDANG3oWQd2gE2PVeBY4yGY9NmDQxmxAah03BqbxhAPcnQ3fsqDnzY2PqD8FJ+GjRqSKgIc1",
	"l0LiAmcDkl1IqtfGRs+jsJPWxNOYXsC+a1dPfx162CcWbNgYeg0X0wa8iTyasLLpAp+2MUHPwxrYOePT",
	"NnRp2KusloEZ9s7AwbtY7RtdgruQUMSR7MBd6AQfaK8LjVXDowS5rUCQDvQ80IKKZwPTIPCGj0gg4dWw",
	"i+SFawPTWIc3LmOPXsQt5J4FjrMFrJ0scQvbiv5N4+YxDLroWPC4Bd1j8CYl4BgFLfbSdWCsGg8/uP3w",
	"n1+N9u+Nhl+Nhi8bprHL3SToJ2ZukGaVERT4uwQohaSDPXqWQECh70GFjlxk7bigMyWro+Gro+FwtH93",
	"NLzNuP2Lmluzg9zHT5odcPPxRx5hSu4Cz9vDxJ6W7u9G+5+PhnfzVMSIPsaIPnqKEQ1UMIuw7wXk9v8z",
	"Gn41fv12OUlTRoo5MBPNC8oQzLeBWq7fXWB8bVBMQh+SOdtGztQafmO0/85o/++j4Yc69YKbj59YOfXY",
	"6Z8+urLCjIq8y/6WgyyB5BbGDgRuKZrjFz/67g+vStRc33GCnmeBSiJIDlQCkJw+nVV1CAumSEFAQfnP",
	"YbJzBbSyypdC6HTo+Oj+H3+rBcVMWtn/32j/Y60+tHoQZUrpIPiXVQIfpdhHRGHHU44B4Q+AENArxf63",
	"X7/98NaLMu822oWm7yOumuqVH0Bi3nLpvU6WbnrDf/v12+Pfv5BneNOIXpinYAxvepGK0WbGUIpUHzIa",
	"wdCn53ehy/9bs9ehB8kuS1fW7EtQFbQ7nTBhmsZ97o2G74yG90bDl2ShkkBiGj5xput+c/2irtfMSMCl",
	"4MQSVWx6kKikRhZ2N6dla7T/1wCagez3MixKo+4JU9SDZ7Uxdp4kQBomkUthC5JyI8Od98aff1pI8Gec",
	"XBsTuuZSgm3fmj4APPjzndELv3r46w/Gn33y4NPPv/3y1dIC15XcnNCPW0J2E9lcNoRKT2n8nEOehYm9",
	"qJlPxGba1inIz4wELQZ4djJIsXMZ9KLIInNCCXC9bUienhoa939z9+E3ASgefPP+dLiQeEgr8jJBu6y7",
	"zChu2ySc/U8z5Lx2/+VbpZ1nGxGPTq+i8eu3xy/fnpzaL4ALZqH449H+h6PhKz8pTRl5l4CUnU+SKt+/",
	"9Y/xS+8qU2UHzKq+O2+WFiIiNpv27rw5sfa6gECXnpkFlw8+e+X+rXe/u/W3B/9+Z/ziSxPClDNwFjpO",
	"t41d+LTf2eKT+pkZuf/6F+P/3v3urS8fvv/Jgzc+GL/2mYYpRtjlhBOWnsIdOG+Wxm99Mf7Xn/QsqTmZ",
	"HoVpjXz8WvmB0DRmln5i3aeXqiIXTDmIGNzSoScOCDL/Zhx7Ja3q8Jd2jCTCh9PUK6C1Zh/euaofT1WD",
	"fypNHE1YjyasdUxYvSchn6tmIQh3o2pQLFAq7QYOdG1AnkVwT5FAFKFpYHISa7bymdpWTGA2p95SZi3J",
	"cwpt1fOUxiIOTLXuJBEl0hKda2nbKslkdH4+EX8JNJs8R9iVcZNX7cnq45mt69CiwtKJUUq9M1sxJYDa",
	"WFnmFNbrAgvRnmKVoYTltpGLvPa5cAKUfUwgPJtLoA7zXshnkojLXkUtNiggVNuVl/M0hQKZqgYLSX+S",
	"qkui4oLiDVkGMzF/ylhqPK2nVTVPLOVFgSOclcYZX0qbJaRJVuYhZNPjaiwZ2EqBW4/hItjPCu5IRSVA",
	"Lohffjk8D2/KBe7QaGuWxjXYQ7s4qITthN5i3atWvQPJ2T6ArGxqNtPkpJ54yXc+XVFAfUUS58W/F2RK",
	"YUOxx5xy76TOEnbGsXEBObDQNTiVDDvBu8pAyrY82GfU2II3KXQ9/ZAc9Zl5lFNrHpjGzgZ6Hk4I5q6d",
	"w2cu1EugOZTETGAdYplzKipCkM0UtCdyaGYwljbisprhQNSdKPoKxo5i9YTXSTbLBAehbdKtOiZPM/YF",
	"PU0wzKXHDl3dEFgU7cKLqIPUdomk0pnH1FceCwuE5Up6LJPwbehS3cpfHnzyana5A1MIK5m0vuYm60kl",
	"mCnpOm2ZsCI3l4Fp9uJZun+ULSYmhLRlsTbyKCYITgP1uFuO+adYV71C2CckNVzK3WWDaRtaO7osOr/M",
	"VxjiehAQlRekRGDNUsTMmDF19Jq2ypdflSuuouVVu3IrVoUVpuJKUPlSTfkKSkGFo6gEsXjlgrTE6jKC",
	"Ynwpv8GkdBSvLEYLMVmz8yESMBnGjkbBxRsF+Ws1jFvanZ2ZekPxYBX2xV0n6LRoiEqVCjLvZ7eP62IR",
	"jUp++UrgzcJEOUN4mrphXpo/DVOqkl7Eonr36R4mO9NYKvjHVc36LbIVJ5NlSOiiVJ1xGub4pzOstyyj",
	"+RaYF3Ulnk2mljJGDtvFVk7qZgonyJF+osGo8mGmmO263XjSsnd5QPBei6BYXICZfPlKxYEGjlV4gkhW",
	"vXg2vRtMWEzOscWiO0ZGiwfjFTlembMCVk4h8YKUyEGJs2vX92hx50Ejoctyx80mM2aa7aIzURPxLRwu",
	"Ta2RJw+KFsnDltfYDnBo+QTR3kbgs+FRWggIJIE/BN+22LcLmHQANVaNnz93xQhPMTIa7KkRe3Kb0i7f",
	"8oHcbcyYQTRAqXEOtZCFSYDuXUj4+qlx8viJ4ysBMnAXuqCL2E8rx0+yWRVtM3aaMNr60YI0k0gZT0La",
	"YC0aDvKowboicbXNiLeOsHka6EDKFgqvBnmvsWrc8CHpRVBbNfD2tgdpJCBQri1cM+WTx4+srMztVKm4",
	"1yXnuG9LlnlgGqdWTur6jpltSgdh2Uunil+KD/IOTOM0FzX/hdT5YxFkTO8ivK5eC9TJB5WwkMhhyY3e",
	"7Ie1xUGx+bWWPx+XJ1UACGCW2F8sZUYOQ4kPFYCI/bQmPERilIHFYUBEsy9Vm0sgpCG8UISW9VQluxro",
	"mMqe0lX0RYWirKNS4YrI+6UOG0abPIWwoQMpzCL1HPu90emVwCtvm3eM7wi0M4HWzjHGskHXNLq+InLy",
	"lLgcHgvOlH6vwMiukXkC27054rDo0K0CiZfUepeFGSym91g50FnGwO9E26m0KQhr0eBngTOpB9+NVbkp",
	"ORmF2S7GzCVnBK6ydRRRvqYlzmGxp5D0WUjQdq/B3syEiMwUvjpny5DS3NTTCKapwdT2AHyrFJORQ3l8",
	"l90MqFZYtROvfjS5w/4yXv9QWjcaEOLXGsCysK+YfKnWVlgVtFKTK1dzVJFVJUDtti/LbQQBiuOwmuWf",
	"xccSwBDuSZs2DlccVhPhQpR68QZTbXDlTXTRNdyhWnl4DemoTJjwp3FFLsEcImxqtbFSf0vRWtAYW8xl",
	"pUE22byshC9/ucFbNdimJCWGeS/VY5jTUZnScRr8rj+v8UzEHnCm11aonXiDtta7t5EDtau70Q7vGjTD",
	"CSlUkzC4LLltZBY2N1TGocCzGuFdX4ooJFiluvCjt8hm18HAjvire8okb/NXsBcmUtthGbQ2Ywoe1+zz",
	"Otug0PVyvO5CVKornt3HVb1FWhkqNFSsg+Vz7AALNNyjr7V/0ECXVrEN/pWbiFFRWOZKxNkEwjNxueTR",
	"REcredBAO+iEU5k5VRRN9ase5KfiDrIUuVkwJ2lJmloWJ2HgSHASLttrodLpNboE60JleE6kFlOpFxJF",
	"Ywm8Lpm1NIvYm2xzf56NkjsAq1z81Zvnksha3alKMWr8jAKXZ60h6+hNOzk2pHX4sE3+mq58CqkmQ0bk",
	"FPY8l2F6LoqSlyx8/YpFpDT1yoXuHsXqXTJNcQFXMUr56eyLF9NjIX2GIG+oRPLhBY3fpI441KJdiWbx",
	"OCoJctgG01wrqq8brd6Viwx4KcP3wbhxWaD5anUv9fjbTc6+5ibcYTNtALkcN6jFpBG5Eul31PKwpd8a",
	"i2UuA64+TuQY65LI6Dyiw+QAKpGIixBa2kCQnL3On3mzZsUz8Ogsd10BISRXZj4uS3A0L08HBsFyFQcG",
	"vdEWYJZeAlLiZF2BqqWMFX1+gmpQvJyL7B95RYEiPmldXNKIT24tUklDkKHMuq2kkmVdv40QMvd5quJ8",
	"/RIA52geLEFoD5OdJuVHHfWFMtDSVouiyxG+R0fQIpYV1o8lXRZTB/Yt2uhAmfmy+xwS01a4zyHHGOFG",
	"AhqzUGdWIt13kc9cbVYUHbbZZ2eZByXO3Kjsyx9JQpYJ7tH56Zlje0GeJv6p2RqdJC8C5gS/A9BfjUiP",
	"5F++kJgzdVPGRL82g1c1EyyytST9ooVcgbn6Q+5eeHuPNkQEDXKzJHb/T9X7arjrrSn31tQcU/iVSVkz",
	"Joo6TEnWHre+OssKoVFxmqUzSJjK7CVM1O31wo1EBfwdjOM3+/xSnjLZltLQSboliFpm/IgvAzpsGZdS",
	"jVm41KvDWmEfa+FQJV7qOOnXafcqk698k8s6OIrEPBKzN4KXuaVllmy4Cx3cDa/C55c0rTab/Tb26GC1",
	"38WEDprs73cRBLbCi+Xa8Ti9DXyHGquGgy3gsJ/ZME5Sjx9bYX/aXuCur9hGBV0a6r/hscNEcl5mBElb",
	"yuAeJJm2/Kxkpi07pp5pHN2J01dtIU83ZnvEs23DkwKZ5tF++uwbAUQyzTksrg3+HwAA//9Hm4AJzIYA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
