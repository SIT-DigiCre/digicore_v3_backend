// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
