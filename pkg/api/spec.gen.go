// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
